{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-async/source/failure.ico","path":"failure.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/sw.js","path":"sw.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/css/index.less","path":"css/index.less","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/img/banner.png","path":"img/banner.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/img/block.jpg","path":"img/block.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/css/plugins/bootstrap.min.css","path":"css/plugins/bootstrap.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/css/plugins/bootstrap.row.css","path":"css/plugins/bootstrap.row.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/css/plugins/locomotive-scroll.css","path":"css/plugins/locomotive-scroll.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/css/plugins/font-awesome.min.css","path":"css/plugins/font-awesome.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/fonts/webfonts/fa-brands-400.woff2","path":"fonts/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/fonts/webfonts/fa-regular-400.woff2","path":"fonts/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/fonts/webfonts/fa-solid-900.woff2","path":"fonts/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/js/plugins/local_search.js","path":"js/plugins/local_search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/js/plugins/typing.js","path":"js/plugins/typing.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Redis的持久化机制.md","hash":"d72d4a182f757dcb65468fee633eb24ccc0f0742","modified":1694500499708},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1693901899249},{"_id":"source/_posts/redis的内存淘汰策略.md","hash":"f4372dd479adcc6ba2f172e632c34717ffba985b","modified":1694681593286},{"_id":"source/_posts/第一篇博客.md","hash":"1d402a04be7ff3a694959b0d6f672cecffdfa4f7","modified":1694354723798},{"_id":"node_modules/hexo-theme-async/_config.yml","hash":"954f17a561d063990911055974f1117c90287cff","modified":1694392571657},{"_id":"node_modules/hexo-theme-async/README.md","hash":"42ce794d377d34a33e4d61384cb732d8306d8108","modified":1694392571370},{"_id":"node_modules/hexo-theme-async/README_zh-CN.md","hash":"f9dfc82d4b0e70f7afdbca600553157d5d7ebb47","modified":1694392571368},{"_id":"node_modules/hexo-theme-async/package.json","hash":"1c3938f37897a95aebab3dc56ed4a73eb8f63d3c","modified":1694392571259},{"_id":"node_modules/hexo-theme-async/plugins.yml","hash":"f8eb3c9743d93c92816f05bc24e8140c04e52ee3","modified":1694392571663},{"_id":"node_modules/hexo-theme-async/languages/en.yml","hash":"71768276c06ffa953dc2dbb30e05df6a7a6bcec1","modified":1694392571659},{"_id":"node_modules/hexo-theme-async/languages/zh-Hans.yml","hash":"78a0aa3ccf5ee05083a60070ca7a2b0946f62d8c","modified":1694392571666},{"_id":"node_modules/hexo-theme-async/layout/404.ejs","hash":"711cf5844e92ce42c22f93b50c6b794f1104a39e","modified":1694392570761},{"_id":"node_modules/hexo-theme-async/layout/about.ejs","hash":"52c1091fb0a3bd123ca72ad341ba5d1531e794c0","modified":1694392570766},{"_id":"node_modules/hexo-theme-async/layout/archive.ejs","hash":"699b18d557708ddbce89ec9fb3c2ffd8896f330b","modified":1694392570769},{"_id":"node_modules/hexo-theme-async/layout/category.ejs","hash":"ba64e50a822c14ea64706ef147fbd735a093ee82","modified":1694392570790},{"_id":"node_modules/hexo-theme-async/layout/comment.ejs","hash":"55d3a6b69c5fdbeb6e946541401528243b4455cb","modified":1694392570796},{"_id":"node_modules/hexo-theme-async/layout/index.ejs","hash":"02a02f3a2f5a9da329cd4c2ec0bd1af6c8d58f95","modified":1694392570823},{"_id":"node_modules/hexo-theme-async/layout/custom.ejs","hash":"3e1cea3e7904992bdc8df2d630d75479bb2f6c16","modified":1694392570797},{"_id":"node_modules/hexo-theme-async/layout/layout.ejs","hash":"efaa02767b0b400376a2feba1ec910b972a327a3","modified":1694392570826},{"_id":"node_modules/hexo-theme-async/layout/links.ejs","hash":"5db12fd2559da0fdebf6c80566adbbf459361e61","modified":1694392570828},{"_id":"node_modules/hexo-theme-async/layout/post.ejs","hash":"73264aa0e34b3cda21ec6ca33e932144c6b33811","modified":1694392570847},{"_id":"node_modules/hexo-theme-async/layout/page.ejs","hash":"1a81e2a16d463f5f944ae3b79f444c2ac4de1ce0","modified":1694392570833},{"_id":"node_modules/hexo-theme-async/layout/tag.ejs","hash":"9971000a24ac3bd1fdee7cd4a46ce1ccd1c48c5c","modified":1694392570856},{"_id":"node_modules/hexo-theme-async/layout/project.ejs","hash":"379a9822df4eba98d3be636e76dc2c578cb47d47","modified":1694392570849},{"_id":"node_modules/hexo-theme-async/scripts/utils.js","hash":"fcde4a1eb77de269bcfee9135e77f171077d53ec","modified":1694392571254},{"_id":"node_modules/hexo-theme-async/source/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1694392570960},{"_id":"node_modules/hexo-theme-async/source/sw.js","hash":"01b07120762ab155c99478afb36075d4d7e2bc9c","modified":1694392571243},{"_id":"node_modules/hexo-theme-async/layout/_partial/banner.ejs","hash":"4e3ce9dbbd00e0649ed352bf89c324b4023ad23b","modified":1694392570777},{"_id":"node_modules/hexo-theme-async/layout/_partial/footer.ejs","hash":"63a418de42c4ac263d5fba7388f7852bd84560c6","modified":1694392570805},{"_id":"node_modules/hexo-theme-async/layout/_partial/main.ejs","hash":"b96fbd7b839cb4f774cf332a7dd3ec4f3bd7bbb0","modified":1694392570829},{"_id":"node_modules/hexo-theme-async/layout/_partial/header.ejs","hash":"891be309ffcc21616f3c00690407fda625bb18ff","modified":1694392570817},{"_id":"node_modules/hexo-theme-async/layout/_partial/head.ejs","hash":"492db41c5ad4b5574385fc3924ec27b9633f5f15","modified":1694392570808},{"_id":"node_modules/hexo-theme-async/layout/_partial/script.ejs","hash":"6d9d5202a0eb36783505e77498ff54f85896f07e","modified":1694392570852},{"_id":"node_modules/hexo-theme-async/layout/_third-party/cdn.ejs","hash":"964693a454808aa8277027ec3c5dda7f7af01255","modified":1694392570792},{"_id":"node_modules/hexo-theme-async/layout/_third-party/sw.ejs","hash":"277f75522dffa7d985f3400f18b4f60861d2430d","modified":1694392570855},{"_id":"node_modules/hexo-theme-async/layout/_third-party/web-analytics.ejs","hash":"9ed8b2717075bb8f37d65580f1de586ebbb89bc1","modified":1694392570859},{"_id":"node_modules/hexo-theme-async/layout/_third-party/plugin.ejs","hash":"1af7dac0d91366cc334be40aa78dec0c9a59158c","modified":1694392570835},{"_id":"node_modules/hexo-theme-async/layout/_widget/categorie.ejs","hash":"634d10e2965f9b2cdd662eaaf8ee027814eb7ad1","modified":1694392570780},{"_id":"node_modules/hexo-theme-async/layout/_widget/header_logo.ejs","hash":"6606af77338567179413b1596b558e77bde7c6bf","modified":1694392570811},{"_id":"node_modules/hexo-theme-async/layout/_widget/fixed-btn.ejs","hash":"76b2e9fb70272e7fb2759ca58c0f76715fa5acce","modified":1694392570803},{"_id":"node_modules/hexo-theme-async/layout/_widget/header_search.ejs","hash":"62a5a69f6206c224f037229968b2961f241eef2e","modified":1694392570814},{"_id":"node_modules/hexo-theme-async/layout/_widget/header_menu.ejs","hash":"c2efd3f4417b8f6f27caf86a8467903d73fcdc6d","modified":1694392570813},{"_id":"node_modules/hexo-theme-async/layout/_widget/header_theme.ejs","hash":"02e74ddaa74422e7189d219c1b360cb58cdd3e1a","modified":1694392570816},{"_id":"node_modules/hexo-theme-async/layout/_widget/paginator.ejs","hash":"c7b76e443375b7d2bb15452b34ffcc654105db1f","modified":1694392570833},{"_id":"node_modules/hexo-theme-async/layout/_widget/search.ejs","hash":"573c500a4ecb65b822b3a34168dbcf446c92bc0f","modified":1694392570854},{"_id":"node_modules/hexo-theme-async/scripts/console/plugin.js","hash":"d31a3bc8ee816dbccbf4da914116a9991dd0b395","modified":1694392571240},{"_id":"node_modules/hexo-theme-async/scripts/events/config.js","hash":"c0cafdbf5ad59d277065b22958026f004c00195d","modified":1694392571210},{"_id":"node_modules/hexo-theme-async/scripts/events/index.js","hash":"872489c688bdad9d3c70c3b8b73fcad55a5e38b8","modified":1694392571221},{"_id":"node_modules/hexo-theme-async/scripts/events/layout.js","hash":"ca81e8ed0aff086eca498c0bdc84ee05585ae245","modified":1694392571226},{"_id":"node_modules/hexo-theme-async/scripts/helper/async_config.js","hash":"2714e1f35aa5a625b27332898209c477e107b1c8","modified":1694392571200},{"_id":"node_modules/hexo-theme-async/scripts/helper/index.js","hash":"bde383f098d69571eec6feca1539040ce132b820","modified":1694392571224},{"_id":"node_modules/hexo-theme-async/scripts/helper/list_archives.js","hash":"bfe4d871ca685d67cba73d824a3bbb8f610929b1","modified":1694392571227},{"_id":"node_modules/hexo-theme-async/scripts/helper/list_categories.js","hash":"57bcd21f608fd985a4c755a30e6b40ad91494f3e","modified":1694392571230},{"_id":"node_modules/hexo-theme-async/scripts/helper/tag.js","hash":"0d9d369f95bdf916628132c7ca2452da63825741","modified":1694392571247},{"_id":"node_modules/hexo-theme-async/scripts/helper/variable.js","hash":"3a39eb9b05b4624d444fbf036597932e3f8d7728","modified":1694392571257},{"_id":"node_modules/hexo-theme-async/scripts/helper/toc.js","hash":"b2bb8f1c854a5bb9cb6a0cb82de1cab7e5ba681b","modified":1694392571249},{"_id":"node_modules/hexo-theme-async/scripts/filters/index.js","hash":"b1ea8e2b4b6ad798a5774a8633e55ca352ece5ae","modified":1694392571222},{"_id":"node_modules/hexo-theme-async/scripts/filters/cdn.js","hash":"ebc35d0ca20d65e7f113371ae3ddb0fd4988dee4","modified":1694392571207},{"_id":"node_modules/hexo-theme-async/scripts/tags/caniuse.js","hash":"ce50e901dfe8b556786c1ebde4639d632e88c9ea","modified":1694392571204},{"_id":"node_modules/hexo-theme-async/scripts/tags/imgs.js","hash":"611ea3c68d2ea8dfc5711b77b42183f65c0e0296","modified":1694392571219},{"_id":"node_modules/hexo-theme-async/scripts/tags/gallery.js","hash":"81a6604d847199f12af569ebd512f1989c9660cb","modified":1694392571214},{"_id":"node_modules/hexo-theme-async/scripts/tags/flink.js","hash":"b48daa4a9b70f616e7867b41badde830176f7e31","modified":1694392571212},{"_id":"node_modules/hexo-theme-async/scripts/tags/tabs.js","hash":"2ff28bdaf5bf184208290be766e98ed18ca84780","modified":1694392571245},{"_id":"node_modules/hexo-theme-async/source/js/main.js","hash":"ffb319279f80567f25383a01099b40ac81b0ff4f","modified":1694392571237},{"_id":"node_modules/hexo-theme-async/source/css/index.less","hash":"dfb6f56f06f8980a7c11962a92ba389f4d017dd3","modified":1694392571321},{"_id":"node_modules/hexo-theme-async/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1694392570970},{"_id":"node_modules/hexo-theme-async/source/img/favicon.svg","hash":"ef922eea66dc950fb1327dd4571d777b8aeb8161","modified":1694392571502},{"_id":"node_modules/hexo-theme-async/source/img/avatar.jpg","hash":"e9e4108ab199202288ee68342a40064649c3d7c1","modified":1694392571190},{"_id":"node_modules/hexo-theme-async/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1694392570958},{"_id":"node_modules/hexo-theme-async/source/img/block.jpg","hash":"1dd350354bd3fe2e7287dfe063d7783e4ab91090","modified":1694392571194},{"_id":"node_modules/hexo-theme-async/layout/_partial/page/category.ejs","hash":"041a18d4d563349c0e3110f822d5e82ef6dc2c1a","modified":1694392570788},{"_id":"node_modules/hexo-theme-async/layout/_partial/page/archive.ejs","hash":"cf3ebc04bf199bcf4b396f55c7270c81363f2698","modified":1694392570768},{"_id":"node_modules/hexo-theme-async/layout/_partial/page/index.ejs","hash":"19d539a157993bd92ec61db15cf4f6c8fefbbe11","modified":1694392570819},{"_id":"node_modules/hexo-theme-async/layout/_partial/page/links.ejs","hash":"c2ca0956b0ecb638c4ec7f69a498775ae21f6109","modified":1694392570827},{"_id":"node_modules/hexo-theme-async/layout/_partial/page/about.ejs","hash":"78347fd6281147e49e3183ef30eda1e2105bf5e5","modified":1694392570764},{"_id":"node_modules/hexo-theme-async/layout/_partial/post/post-card-mini.ejs","hash":"170f8d60eb92e857520ad31ef8fa6f317c3b5170","modified":1694392570837},{"_id":"node_modules/hexo-theme-async/layout/_partial/page/project.ejs","hash":"5e143fa68e889c6e829d12f5a89b2d8979a32e46","modified":1694392570849},{"_id":"node_modules/hexo-theme-async/layout/_partial/page/post.ejs","hash":"b55db31dacc274339a1b20a6659fb85bf884ea3a","modified":1694392570846},{"_id":"node_modules/hexo-theme-async/layout/_partial/page/tag.ejs","hash":"7f278f929ff15d2ae843c8931dcd00cbf273cf59","modified":1694392570856},{"_id":"node_modules/hexo-theme-async/layout/_partial/post/post-content.ejs","hash":"2cb43a1657dfcff799f67d8e06c31d4c9b571bca","modified":1694392570841},{"_id":"node_modules/hexo-theme-async/layout/_partial/post/post-copyright.ejs","hash":"b7e4518edcdc719795c30ad325c410a49255471a","modified":1694392570843},{"_id":"node_modules/hexo-theme-async/layout/_partial/post/post-card.ejs","hash":"09e3037a9f67e47ddcd4c26d3f3b0dbdd0ef489b","modified":1694392570839},{"_id":"node_modules/hexo-theme-async/layout/_partial/post/post-next-prev.ejs","hash":"cbd221f3b36f652c80b3c0b0a14125243a13dd7c","modified":1694392570845},{"_id":"node_modules/hexo-theme-async/layout/_partial/post/post-info.ejs","hash":"980872eb767d5015f5bec52617cb74bdbcfbd976","modified":1694392570844},{"_id":"node_modules/hexo-theme-async/layout/_partial/post/reward.ejs","hash":"664c43ab7346d700d942e30d2a5bdd119743c647","modified":1694392570851},{"_id":"node_modules/hexo-theme-async/layout/_partial/preloader/page-preloader.ejs","hash":"a1ce51be9b477e146dcc3bb4fbe9628c1471969e","modified":1694392570831},{"_id":"node_modules/hexo-theme-async/layout/_partial/preloader/change-mode-preloader.ejs","hash":"8a6019defee71021eb9bd46549c8a4479546ec9d","modified":1694392570794},{"_id":"node_modules/hexo-theme-async/layout/_partial/sidebar/index.ejs","hash":"d94eefe8acb426c455bafea6be27a7fce6f4e127","modified":1694392570822},{"_id":"node_modules/hexo-theme-async/layout/_third-party/comment/giscus.ejs","hash":"7ce3479ece958b829a8b9a2256f0db53ce1eeac8","modified":1694392570806},{"_id":"node_modules/hexo-theme-async/layout/_third-party/comment/b-comments.ejs","hash":"202aace17a9bd66cf82b15cdd52db4d8a5b04d28","modified":1694392570772},{"_id":"node_modules/hexo-theme-async/layout/_third-party/comment/index.ejs","hash":"bac629e4c8d28cc16720c17d526e0b9fc7059be3","modified":1694392570823},{"_id":"node_modules/hexo-theme-async/layout/_third-party/comment/twikoo.ejs","hash":"d8c022399cc7e4a48ea01276641388dde925aa5d","modified":1694392570858},{"_id":"node_modules/hexo-theme-async/layout/_third-party/seo/baidu-push.ejs","hash":"2e3d405b5973c5ceed9cc24a5591240c0345cb94","modified":1694392570775},{"_id":"node_modules/hexo-theme-async/source/css/_components/app-frame.less","hash":"8fc482822be50c6dd5fccd85a2f9b8f6ef9d3423","modified":1694392571262},{"_id":"node_modules/hexo-theme-async/source/css/_components/base.less","hash":"4a5e380607970db240dbb8e3c404eef2cb80905e","modified":1694392571265},{"_id":"node_modules/hexo-theme-async/source/css/_components/banner.less","hash":"49be916c438e02e1a0430843e0cba704abb920e9","modified":1694392571264},{"_id":"node_modules/hexo-theme-async/source/css/_components/fixed-btn.less","hash":"d7c75938b04ed376a98b69156d2d3753f182edbc","modified":1694392571289},{"_id":"node_modules/hexo-theme-async/source/css/_components/blockquote.less","hash":"969d13d3e270b98287cfb1fc6ff0ca70dde480cc","modified":1694392571271},{"_id":"node_modules/hexo-theme-async/source/css/_components/card.less","hash":"7646cc3e11debfbf3d5186fa8470c88c0a6672dc","modified":1694392571276},{"_id":"node_modules/hexo-theme-async/source/css/_components/footer.less","hash":"148b39349030a2c400887adc972594cf788b69eb","modified":1694392571290},{"_id":"node_modules/hexo-theme-async/source/css/_components/btn.less","hash":"4c1983d0899d133cff50c14f84cf5f834bb2c33c","modified":1694392571274},{"_id":"node_modules/hexo-theme-async/source/css/_components/form.less","hash":"8bcd9e7d094a7ddfcd617bed07da8f2ca1db93e9","modified":1694392571292},{"_id":"node_modules/hexo-theme-async/source/css/_components/index.less","hash":"9b29da29f4a5a737b61d1ef3b10ad56257f7806d","modified":1694392571294},{"_id":"node_modules/hexo-theme-async/source/css/_components/list.less","hash":"a28990af7f211d3c919fad8e4dbe45af77d3c97f","modified":1694392571324},{"_id":"node_modules/hexo-theme-async/source/css/_components/menu.less","hash":"9aee9cd92fb77e90a47c522e5a3504eb49b62a4e","modified":1694392571328},{"_id":"node_modules/hexo-theme-async/source/css/_components/message.less","hash":"e70983c10167cc08e7ea168d836b0788ac0edc5e","modified":1694392571330},{"_id":"node_modules/hexo-theme-async/source/css/_components/mode-switcher.less","hash":"c232eee8a2b4f3b9f74e8664a8074c06d542e7c9","modified":1694392571334},{"_id":"node_modules/hexo-theme-async/source/css/_components/pagination.less","hash":"c9fd513fe0b88bde7bed61d3125da0c89b2da70b","modified":1694392571336},{"_id":"node_modules/hexo-theme-async/source/css/_components/preloader.less","hash":"01799e25f1f46adf890415b9ffa54d6faa8d6cf0","modified":1694392571338},{"_id":"node_modules/hexo-theme-async/source/css/_components/publication.less","hash":"3dc63f1d1bca08700fdf8a01f19c2643999e18b2","modified":1694392571341},{"_id":"node_modules/hexo-theme-async/source/css/_components/tag-plugins.less","hash":"18f2265b80a57b722cf55180e93487d47af3e1ba","modified":1694392571350},{"_id":"node_modules/hexo-theme-async/source/css/_components/title-divider.less","hash":"762448f365a4ff121f0cc0ede58b773916d4e9ee","modified":1694392571356},{"_id":"node_modules/hexo-theme-async/source/css/_components/timeline.less","hash":"6f97e97a214172402ea5a4547d6f71825424a5af","modified":1694392571354},{"_id":"node_modules/hexo-theme-async/source/css/_components/toc.less","hash":"c0dc5ad1b20054bf9243a2befc13c9f53734a02a","modified":1694392571359},{"_id":"node_modules/hexo-theme-async/source/css/_components/top-bar.less","hash":"9f221a72f9d1aa62bb84e253fa1530aecf17deb6","modified":1694392571361},{"_id":"node_modules/hexo-theme-async/source/css/_components/video.less","hash":"862f3404abca726d1de29fbfc0034081ed417b4f","modified":1694392571366},{"_id":"node_modules/hexo-theme-async/source/css/_variables/index.less","hash":"831bf5eb6f46eaff12ddd7542f52783dff511896","modified":1694392571319},{"_id":"node_modules/hexo-theme-async/source/css/plugins/bootstrap.row.css","hash":"95c954c577f21e537229c4806419206e822eba04","modified":1694392570742},{"_id":"node_modules/hexo-theme-async/source/css/plugins/locomotive-scroll.css","hash":"221f0205ccfc91a68b095f0d02c00e664e9ddf61","modified":1694392570756},{"_id":"node_modules/hexo-theme-async/source/css/plugins/font-awesome.min.css","hash":"6137a9883adce70d78c7f7bbe8af27d91b627d32","modified":1694392570753},{"_id":"node_modules/hexo-theme-async/source/fonts/webfonts/fa-regular-400.woff2","hash":"fbb0d9d51850d824d7eba66e0e210c778d6d42f5","modified":1694392571557},{"_id":"node_modules/hexo-theme-async/source/js/plugins/local_search.js","hash":"18823ee20d0f09d2a925e3189a6458620636ee67","modified":1694392571233},{"_id":"node_modules/hexo-theme-async/source/js/plugins/typing.js","hash":"49e5af4f80da9bfd46a81495711822de87719656","modified":1694392571251},{"_id":"node_modules/hexo-theme-async/layout/_partial/sidebar/card/email.ejs","hash":"d8ceed83ba3b0af7d361ca9254a62afd6e8f741e","modified":1694392570800},{"_id":"node_modules/hexo-theme-async/layout/_partial/sidebar/card/info.ejs","hash":"dfa5d015d7174ad02df0099dadfab3e35e85dd59","modified":1694392570824},{"_id":"node_modules/hexo-theme-async/layout/_partial/sidebar/card/social.ejs","hash":"4543c52a486a87f718fcfe03b6ef59bd771759d5","modified":1694392570854},{"_id":"node_modules/hexo-theme-async/layout/_partial/sidebar/card/toc.ejs","hash":"1a82facc6d08f12811783c6d6cc7ad565d859cb6","modified":1694392570857},{"_id":"node_modules/hexo-theme-async/layout/_partial/sidebar/card/user.ejs","hash":"1289fe4e482586510ed2c9a4215c0a4a21dcbec0","modified":1694392570858},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/index.less","hash":"89e4484929bc4255b44b9a9581ab548e4a290046","modified":1694392571308},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/comment/bcomments.less","hash":"d387268ed3486bf66db9243114d55ac974b73fb1","modified":1694392571269},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/comment/index.less","hash":"157debbb5fbf62389dc49a8998c8ee13da526335","modified":1694392571296},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/comment/twikoo.less","hash":"f365099c5fcae37b4c0163c09d9a498aae61af44","modified":1694392571364},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/fancybox/index.less","hash":"f2286a1158475425b8715979c4ae7d90d206c438","modified":1694392571299},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/highlight/index.less","hash":"77897529e46022ea46a5c352622fac891ba0c406","modified":1694392571304},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/highlight/minix.less","hash":"5b7def3a700ef357a53c2660a22b22ee30727596","modified":1694392571332},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/highlight/theme.less","hash":"a967c2857811320bdf85e701a8efc06bac048c60","modified":1694392571352},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/read-mode/index.less","hash":"ba5c0ec35a657fd1d37ef11637e9d11c1ef37fc6","modified":1694392571310},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/read-mode/read-mode.less","hash":"687dd581162d5e35e0d871fbc6392a7cadc4ecb9","modified":1694392571343},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/read-mode/single-column.less","hash":"5589661bf35cd6c5bc08a9005edbf95906bcf178","modified":1694392571348},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/search/index.less","hash":"7f57003ebd89d50a4e6a8a4c6636bcd129e22eed","modified":1694392571315},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/search/search.less","hash":"306d1dd8a24b36c3ed602a6e03e6ba0370722d70","modified":1694392571347},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/reward/index.less","hash":"a3b79acb10a9cd86c667729e77cb00580fb9adf8","modified":1694392571313},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/reward/reward.less","hash":"bd4a0cda40f3407cc73bd585c5d318074bfb4bfa","modified":1694392571345},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/highlight/highlight/diff.less","hash":"3879fa32f66d23b74c6e6dd016f58ea1eff4d39c","modified":1694392571280},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/highlight/highlight/index.less","hash":"552296ca563930093a85290f84316bbb76821175","modified":1694392571301},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/highlight/prismjs/diff.less","hash":"3b6f63fa0c8f033219aa2cc6e6bd9e33a0a8ab81","modified":1694392571287},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/highlight/prismjs/line-number.less","hash":"b5e9230948a1cdf0dc198498ee6694c26f26b88e","modified":1694392571323},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/highlight/prismjs/index.less","hash":"d2411c499a7b83284c71655574063c14bbbe5fce","modified":1694392571306},{"_id":"node_modules/hexo-theme-async/source/fonts/webfonts/fa-brands-400.woff2","hash":"f988b2efe9434b0af28943708d33dd3afad9a5ba","modified":1694392571541},{"_id":"node_modules/hexo-theme-async/source/fonts/webfonts/fa-solid-900.woff2","hash":"80644191098f863f25be27841c0d92c452cf2327","modified":1694392571653},{"_id":"node_modules/hexo-theme-async/source/css/plugins/bootstrap.min.css","hash":"b6f019002b87e86a07275eacd3c35a13c378b5c3","modified":1694392570738},{"_id":"node_modules/hexo-theme-async/source/img/banner.png","hash":"1fc9c8d054e401d68788027107c9392f047aa5fa","modified":1694392571499},{"_id":"public/2023/09/14/redis的内存淘汰策略/index.html","hash":"31b0f18256227abaa0826899d47eaf64509d866c","modified":1694681900113},{"_id":"public/2023/09/10/第一篇博客/index.html","hash":"d156e8b6cfda5ec2e88957cf05d025f18356976e","modified":1694681900113},{"_id":"public/tags/redis/index.html","hash":"f38da25e500b89d6af2d44527bebb4827b2de2f9","modified":1694681900113},{"_id":"public/2023/09/12/Redis的持久化机制/index.html","hash":"4b8eed6e557132125d3c9ae209dee0f58e90234d","modified":1694681900113},{"_id":"public/2023/09/05/hello-world/index.html","hash":"f6b5e3db6004d9b2f8ddec22ae71dbcec9ae7e45","modified":1694681900113},{"_id":"public/archives/index.html","hash":"0d1b121d96da4d560ee2a828b73eab122590ed45","modified":1694681900113},{"_id":"public/index.html","hash":"594d76f06fd0953eb94ac52dc5113799a2a1b988","modified":1694681900113},{"_id":"public/archives/2023/index.html","hash":"c91a7cf9ad95645f96bdf35c40529a36f9bac3ce","modified":1694681900113},{"_id":"public/archives/2023/09/index.html","hash":"c67e8ecdb0348c3f5f2d4b477b02520557702d3d","modified":1694681900113},{"_id":"public/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1694681900113},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1694681900113},{"_id":"public/img/favicon.svg","hash":"ef922eea66dc950fb1327dd4571d777b8aeb8161","modified":1694681900113},{"_id":"public/img/avatar.jpg","hash":"e9e4108ab199202288ee68342a40064649c3d7c1","modified":1694681900113},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1694681900113},{"_id":"public/img/block.jpg","hash":"1dd350354bd3fe2e7287dfe063d7783e4ab91090","modified":1694681900113},{"_id":"public/fonts/webfonts/fa-regular-400.woff2","hash":"fbb0d9d51850d824d7eba66e0e210c778d6d42f5","modified":1694681900113},{"_id":"public/sw.js","hash":"01b07120762ab155c99478afb36075d4d7e2bc9c","modified":1694681900113},{"_id":"public/css/plugins/bootstrap.row.css","hash":"95c954c577f21e537229c4806419206e822eba04","modified":1694681900113},{"_id":"public/css/plugins/locomotive-scroll.css","hash":"221f0205ccfc91a68b095f0d02c00e664e9ddf61","modified":1694681900113},{"_id":"public/js/plugins/typing.js","hash":"49e5af4f80da9bfd46a81495711822de87719656","modified":1694681900113},{"_id":"public/js/plugins/local_search.js","hash":"18823ee20d0f09d2a925e3189a6458620636ee67","modified":1694681900113},{"_id":"public/js/main.js","hash":"ffb319279f80567f25383a01099b40ac81b0ff4f","modified":1694681900113},{"_id":"public/css/plugins/bootstrap.min.css","hash":"b6f019002b87e86a07275eacd3c35a13c378b5c3","modified":1694681900113},{"_id":"public/css/plugins/font-awesome.min.css","hash":"6137a9883adce70d78c7f7bbe8af27d91b627d32","modified":1694681900113},{"_id":"public/fonts/webfonts/fa-brands-400.woff2","hash":"f988b2efe9434b0af28943708d33dd3afad9a5ba","modified":1694681900113},{"_id":"public/fonts/webfonts/fa-solid-900.woff2","hash":"80644191098f863f25be27841c0d92c452cf2327","modified":1694681900113},{"_id":"public/img/banner.png","hash":"1fc9c8d054e401d68788027107c9392f047aa5fa","modified":1694681900113},{"_id":"public/css/index.css","hash":"4305f18aa00faa2c383e242aa6d48697abb0895d","modified":1694681900113}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Redis的持久化机制","date":"2023-09-12T01:15:51.000Z","_content":"\n# Redis的持久化机制\n\n### 引言\n\n我们都知道，Redis 的数据存储在内存中, 一旦服务器宕机，内存中的数据将全部丢失。因此，对 Redis 来说，实现数据的持久化，避免从后端数据库中进行恢复，是至关重要的。本篇我们详细讲解下 Redis 的三种持久化机制，分别是 AOF（Append Only File） 日志和 RDB 快照 以及 混合持久化。\n\n### AOF机制\n\nAOF 日志是写后日志，也就是 Redis 先执行命令，然后将数据写入内存，最后才记录日志，重启时通过执行 AOF 文件中的 Redis 命令来恢复数据。如下图所示：\n\n![](https://developer.qcloudimg.com/http-save/yehe-10418638/693b4cb76c16876336e4c5a3a06fed27.png)\n\n类似MySql bin-log 的原理，AOF 能够解决数据持久化实时性问题，是目前 Redis 持久化机制中主流的方案。\n\n### AOF持久化流程\n\nAOF 持久化方案进行备份时，客户端所有请求的写命令都会被追加到 AOF 缓冲区中，缓冲区中的数据会根据 Redis 配置文件中配置的同步策略来同步到磁盘上的 AOF 文件中，追加保存每次写的操作到文件末尾。当 AOF 的文件达到重写策略配置的阈值时，Redis 会对 AOF 日志文件进行重写，给 AOF 日志文件瘦身。Redis 服务重启的时候，通过加载 AOF 日志文件来恢复数据。如下图所示：\n\n![](https://developer.qcloudimg.com/http-save/yehe-10418638/bc15aa10e9c9d41ef356faa07b60cb82.png)\n\n### Redis AOF 执行流程\n\nAOF 为了避免额外的检查开销，并不会检查命令的正确性，如果先记录日志再执行命令，就有可能记录错误的命令，再通过 AOF 日志恢复数据的时候，就有可能出错，而且在执行完命令后记录日志也不会阻塞当前的写操作。但是 AOF 是存在一定的风险的，首先是如果刚执行一个命令，但是 AOF 文件中还没来得及保存就宕机了，那么这个命令和数据就会有丢失的风险，另外 AOF 虽然可以避免对当前命令的阻塞（因为是先写入再记录日志），但有可能会对下一次操作带来阻塞风险（可能存在写入磁盘较慢的情况）。这两种情况都在于 AOF 什么时候写入磁盘，针对这个问题 AOF 机制提供了三种同步策略（appendfsync 参数）。\n\n### AOF 写入磁盘的同步策略\n\n| 参数     | 同步策略                                                     |\n| -------- | ------------------------------------------------------------ |\n| Always   | 同步写入磁盘，只要有写入就会调用fsync函数；                  |\n| Everysec | 每秒调用fsync函数一次，每个命令执行完，先把日志写入 AOF 文件的缓冲区，每隔一秒把缓冲区的内容写入磁盘 |\n| No       | 不调用fsync，让操作系统决定何时同步磁盘。每个命令执行完，先将日志写入 AOF 文件的缓冲区，由操作系统决定何时把缓冲区的内容写入磁盘 |\n\n### 三种同步策略的优缺点如下：\n\n* Always：可靠性较高，数据基本不丢失，但是对性能影响较大\n* Everysec：性能适中，及时宕机也只会丢失一秒的数据\n* No：性能好，但发生当即情况时，\n\n### AOF重写\n\n我们上面说过，AOF 属于日志追加的形式来存储 Redis 的写指令，虽然有一定的写回策略，但毕竟 AOF 是通过文件的形式记录所有的写命令，但如果指令越来越多的时候，AOF 文件就会越来越大，可能会超出文件大小的限制。如果发生宕机，需要把 AOF 所有的命令重新执行，以用于故障恢复，数据过大的话这个恢复过程越漫长，也会影响 Redis 的使用。因此 Redis 提供 **重写机制**来解决这个问题。\n\nAOF 重写的过程是通过主线程 fork 后台的 bgrewriteaof 子进程来实现的，可以避免阻塞主进导致性能下降，整个过程如下：\n\n* AOF 每次重写，fork 过程会把主线程的内存拷贝一份 bgrewriteaof 子进程，里面包含了数据库的数据，拷贝的是父进程的页表，可以在不影响主进程的情况下逐一把拷贝的数据记入重写日志；\n\n* 因为主线程没有阻塞，仍然可以处理新来的操作，如果这时候存在写操作，会先把操作先放入缓冲区，对于正在使用的日志，如果宕机了这个日志也是齐全的，可以用于恢复；对于正在更新的日志，也不会丢失新的操作，等到数据拷贝完成，就可以将缓冲区的数据写入到新的文件中，保证数据库的最新状态。\n\n### RDB快照\n\nRDB是一种快照存储持久化方式，具体就是将Redis某一时刻的内存数据保存到硬盘的文件当中，默认保存的文件名为dump.rdb，而在Redis服务器启动时，会重新加载dump.rdb文件的数据到内存当中恢复数据。\n\n为了 RDB 数据恢复的可靠性，在进行快照的时候是全量快照，会将内存中所有的数据都记录到磁盘中，这就有可能会阻塞主线程的执行。Redis 提供了两个命令来生成 RDB 文件，分别是 **save** 和 **bgsave** ：\n\n* **save**：执行 save 指令，阻塞 Redis 的其他操作，会导致 Redis 无法响应客户端请求，不建议使用。\n* **bgsave**：执行 bgsave 指令，Redis 后台创建子进程，异步进行快照的保存操作，此时 Redis 仍然能响应客户端的请求。\n\n### 自动间隔保存\n\nRedis 可以设置间隔性保存，让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时，自动保存一次数据集。比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 10 个键被改动”这一条件时，自动保存一次数据集：save 60 10\n\nRedis 的默认配置如下，三个设置满足其一就会触发自动保存：\n\n> save  60  10000\n>\n> save  900  10\n>\n> save  300  1\n\n### RDB模式优点\n\n* 相比AOF在恢复数据的时候需要一条条的执行操作命令，通过RDB文件恢复数据的效率更高；\n* 同样规模的内存数据，RDB文件数据更加紧凑，磁盘空间占用更小；\n* 适合全量备份内存数据场景；\n* 可以根据不同的时间间隔保存RDB文件，在恢复数据的时候可以更加灵活地选择对应版本数据进行恢复\n\n ### RDB模式缺点\n\n* 由于RDB数据保存存在一定的时间间隔，因此存在丢失缓存数据的风险；\n* fork子进程进行RDB文件生成，由于是一次性生成一个内存快照文件，对于服务器磁盘IO以及Redis本身来说都属于重操作，可能会对服务器的磁盘IO造成压力。\n\n### 混合使用AOF日志和RDB快照\n\nRedis4.0 后大部分的使用场景都不会单独使用 RDB 或者 AOF 来做持久化机制，而是兼顾二者的优势混合使用。其原因是 RDB 虽然快，但是会丢失比较多的数据，不能保证数据完整性；AOF 虽然能尽可能保证数据完整性，但是性能确实是一个诟病，比如重放恢复数据。  \n\nRedis从4.0版本开始引入 RDB-AOF 混合持久化模式，这种模式是基于 AOF 持久化模式构建而来的，混合持久化通过 **aof-use-rdb-preamble yes** 开启。这样的好处是 RDB 快照不需要很频繁的执行，可以避免频繁 fork 对主线程的影响，而且 AOF 日志也只记录两次快照期间的操作，不用记录所有操作，也不会出现文件过大的情况，避免了重写开销。\n\n ### 总结\n\n本文主要分析了Redis AOF、RDB快照 以及混合持久化的内存数据持久化的机制原理，生产环境中推荐使用混合持久化，这种方式综合了RDB和AOF两种方式的优点。\n\n","source":"_posts/Redis的持久化机制.md","raw":"---\ntitle: Redis的持久化机制\ndate: 2023-09-12 09:15:51\ntags: redis \n---\n\n# Redis的持久化机制\n\n### 引言\n\n我们都知道，Redis 的数据存储在内存中, 一旦服务器宕机，内存中的数据将全部丢失。因此，对 Redis 来说，实现数据的持久化，避免从后端数据库中进行恢复，是至关重要的。本篇我们详细讲解下 Redis 的三种持久化机制，分别是 AOF（Append Only File） 日志和 RDB 快照 以及 混合持久化。\n\n### AOF机制\n\nAOF 日志是写后日志，也就是 Redis 先执行命令，然后将数据写入内存，最后才记录日志，重启时通过执行 AOF 文件中的 Redis 命令来恢复数据。如下图所示：\n\n![](https://developer.qcloudimg.com/http-save/yehe-10418638/693b4cb76c16876336e4c5a3a06fed27.png)\n\n类似MySql bin-log 的原理，AOF 能够解决数据持久化实时性问题，是目前 Redis 持久化机制中主流的方案。\n\n### AOF持久化流程\n\nAOF 持久化方案进行备份时，客户端所有请求的写命令都会被追加到 AOF 缓冲区中，缓冲区中的数据会根据 Redis 配置文件中配置的同步策略来同步到磁盘上的 AOF 文件中，追加保存每次写的操作到文件末尾。当 AOF 的文件达到重写策略配置的阈值时，Redis 会对 AOF 日志文件进行重写，给 AOF 日志文件瘦身。Redis 服务重启的时候，通过加载 AOF 日志文件来恢复数据。如下图所示：\n\n![](https://developer.qcloudimg.com/http-save/yehe-10418638/bc15aa10e9c9d41ef356faa07b60cb82.png)\n\n### Redis AOF 执行流程\n\nAOF 为了避免额外的检查开销，并不会检查命令的正确性，如果先记录日志再执行命令，就有可能记录错误的命令，再通过 AOF 日志恢复数据的时候，就有可能出错，而且在执行完命令后记录日志也不会阻塞当前的写操作。但是 AOF 是存在一定的风险的，首先是如果刚执行一个命令，但是 AOF 文件中还没来得及保存就宕机了，那么这个命令和数据就会有丢失的风险，另外 AOF 虽然可以避免对当前命令的阻塞（因为是先写入再记录日志），但有可能会对下一次操作带来阻塞风险（可能存在写入磁盘较慢的情况）。这两种情况都在于 AOF 什么时候写入磁盘，针对这个问题 AOF 机制提供了三种同步策略（appendfsync 参数）。\n\n### AOF 写入磁盘的同步策略\n\n| 参数     | 同步策略                                                     |\n| -------- | ------------------------------------------------------------ |\n| Always   | 同步写入磁盘，只要有写入就会调用fsync函数；                  |\n| Everysec | 每秒调用fsync函数一次，每个命令执行完，先把日志写入 AOF 文件的缓冲区，每隔一秒把缓冲区的内容写入磁盘 |\n| No       | 不调用fsync，让操作系统决定何时同步磁盘。每个命令执行完，先将日志写入 AOF 文件的缓冲区，由操作系统决定何时把缓冲区的内容写入磁盘 |\n\n### 三种同步策略的优缺点如下：\n\n* Always：可靠性较高，数据基本不丢失，但是对性能影响较大\n* Everysec：性能适中，及时宕机也只会丢失一秒的数据\n* No：性能好，但发生当即情况时，\n\n### AOF重写\n\n我们上面说过，AOF 属于日志追加的形式来存储 Redis 的写指令，虽然有一定的写回策略，但毕竟 AOF 是通过文件的形式记录所有的写命令，但如果指令越来越多的时候，AOF 文件就会越来越大，可能会超出文件大小的限制。如果发生宕机，需要把 AOF 所有的命令重新执行，以用于故障恢复，数据过大的话这个恢复过程越漫长，也会影响 Redis 的使用。因此 Redis 提供 **重写机制**来解决这个问题。\n\nAOF 重写的过程是通过主线程 fork 后台的 bgrewriteaof 子进程来实现的，可以避免阻塞主进导致性能下降，整个过程如下：\n\n* AOF 每次重写，fork 过程会把主线程的内存拷贝一份 bgrewriteaof 子进程，里面包含了数据库的数据，拷贝的是父进程的页表，可以在不影响主进程的情况下逐一把拷贝的数据记入重写日志；\n\n* 因为主线程没有阻塞，仍然可以处理新来的操作，如果这时候存在写操作，会先把操作先放入缓冲区，对于正在使用的日志，如果宕机了这个日志也是齐全的，可以用于恢复；对于正在更新的日志，也不会丢失新的操作，等到数据拷贝完成，就可以将缓冲区的数据写入到新的文件中，保证数据库的最新状态。\n\n### RDB快照\n\nRDB是一种快照存储持久化方式，具体就是将Redis某一时刻的内存数据保存到硬盘的文件当中，默认保存的文件名为dump.rdb，而在Redis服务器启动时，会重新加载dump.rdb文件的数据到内存当中恢复数据。\n\n为了 RDB 数据恢复的可靠性，在进行快照的时候是全量快照，会将内存中所有的数据都记录到磁盘中，这就有可能会阻塞主线程的执行。Redis 提供了两个命令来生成 RDB 文件，分别是 **save** 和 **bgsave** ：\n\n* **save**：执行 save 指令，阻塞 Redis 的其他操作，会导致 Redis 无法响应客户端请求，不建议使用。\n* **bgsave**：执行 bgsave 指令，Redis 后台创建子进程，异步进行快照的保存操作，此时 Redis 仍然能响应客户端的请求。\n\n### 自动间隔保存\n\nRedis 可以设置间隔性保存，让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时，自动保存一次数据集。比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 10 个键被改动”这一条件时，自动保存一次数据集：save 60 10\n\nRedis 的默认配置如下，三个设置满足其一就会触发自动保存：\n\n> save  60  10000\n>\n> save  900  10\n>\n> save  300  1\n\n### RDB模式优点\n\n* 相比AOF在恢复数据的时候需要一条条的执行操作命令，通过RDB文件恢复数据的效率更高；\n* 同样规模的内存数据，RDB文件数据更加紧凑，磁盘空间占用更小；\n* 适合全量备份内存数据场景；\n* 可以根据不同的时间间隔保存RDB文件，在恢复数据的时候可以更加灵活地选择对应版本数据进行恢复\n\n ### RDB模式缺点\n\n* 由于RDB数据保存存在一定的时间间隔，因此存在丢失缓存数据的风险；\n* fork子进程进行RDB文件生成，由于是一次性生成一个内存快照文件，对于服务器磁盘IO以及Redis本身来说都属于重操作，可能会对服务器的磁盘IO造成压力。\n\n### 混合使用AOF日志和RDB快照\n\nRedis4.0 后大部分的使用场景都不会单独使用 RDB 或者 AOF 来做持久化机制，而是兼顾二者的优势混合使用。其原因是 RDB 虽然快，但是会丢失比较多的数据，不能保证数据完整性；AOF 虽然能尽可能保证数据完整性，但是性能确实是一个诟病，比如重放恢复数据。  \n\nRedis从4.0版本开始引入 RDB-AOF 混合持久化模式，这种模式是基于 AOF 持久化模式构建而来的，混合持久化通过 **aof-use-rdb-preamble yes** 开启。这样的好处是 RDB 快照不需要很频繁的执行，可以避免频繁 fork 对主线程的影响，而且 AOF 日志也只记录两次快照期间的操作，不用记录所有操作，也不会出现文件过大的情况，避免了重写开销。\n\n ### 总结\n\n本文主要分析了Redis AOF、RDB快照 以及混合持久化的内存数据持久化的机制原理，生产环境中推荐使用混合持久化，这种方式综合了RDB和AOF两种方式的优点。\n\n","slug":"Redis的持久化机制","published":1,"updated":"2023-09-12T06:34:59.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmixujhe00006oug7t6z3ep3","content":"<h1 id=\"Redis的持久化机制\"><a href=\"#Redis的持久化机制\" class=\"headerlink\" title=\"Redis的持久化机制\"></a>Redis的持久化机制</h1><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>我们都知道，Redis 的数据存储在内存中, 一旦服务器宕机，内存中的数据将全部丢失。因此，对 Redis 来说，实现数据的持久化，避免从后端数据库中进行恢复，是至关重要的。本篇我们详细讲解下 Redis 的三种持久化机制，分别是 AOF（Append Only File） 日志和 RDB 快照 以及 混合持久化。</p>\n<h3 id=\"AOF机制\"><a href=\"#AOF机制\" class=\"headerlink\" title=\"AOF机制\"></a>AOF机制</h3><p>AOF 日志是写后日志，也就是 Redis 先执行命令，然后将数据写入内存，最后才记录日志，重启时通过执行 AOF 文件中的 Redis 命令来恢复数据。如下图所示：</p>\n<p><img src=\"https://developer.qcloudimg.com/http-save/yehe-10418638/693b4cb76c16876336e4c5a3a06fed27.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<p>类似MySql bin-log 的原理，AOF 能够解决数据持久化实时性问题，是目前 Redis 持久化机制中主流的方案。</p>\n<h3 id=\"AOF持久化流程\"><a href=\"#AOF持久化流程\" class=\"headerlink\" title=\"AOF持久化流程\"></a>AOF持久化流程</h3><p>AOF 持久化方案进行备份时，客户端所有请求的写命令都会被追加到 AOF 缓冲区中，缓冲区中的数据会根据 Redis 配置文件中配置的同步策略来同步到磁盘上的 AOF 文件中，追加保存每次写的操作到文件末尾。当 AOF 的文件达到重写策略配置的阈值时，Redis 会对 AOF 日志文件进行重写，给 AOF 日志文件瘦身。Redis 服务重启的时候，通过加载 AOF 日志文件来恢复数据。如下图所示：</p>\n<p><img src=\"https://developer.qcloudimg.com/http-save/yehe-10418638/bc15aa10e9c9d41ef356faa07b60cb82.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<h3 id=\"Redis-AOF-执行流程\"><a href=\"#Redis-AOF-执行流程\" class=\"headerlink\" title=\"Redis AOF 执行流程\"></a>Redis AOF 执行流程</h3><p>AOF 为了避免额外的检查开销，并不会检查命令的正确性，如果先记录日志再执行命令，就有可能记录错误的命令，再通过 AOF 日志恢复数据的时候，就有可能出错，而且在执行完命令后记录日志也不会阻塞当前的写操作。但是 AOF 是存在一定的风险的，首先是如果刚执行一个命令，但是 AOF 文件中还没来得及保存就宕机了，那么这个命令和数据就会有丢失的风险，另外 AOF 虽然可以避免对当前命令的阻塞（因为是先写入再记录日志），但有可能会对下一次操作带来阻塞风险（可能存在写入磁盘较慢的情况）。这两种情况都在于 AOF 什么时候写入磁盘，针对这个问题 AOF 机制提供了三种同步策略（appendfsync 参数）。</p>\n<h3 id=\"AOF-写入磁盘的同步策略\"><a href=\"#AOF-写入磁盘的同步策略\" class=\"headerlink\" title=\"AOF 写入磁盘的同步策略\"></a>AOF 写入磁盘的同步策略</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>同步策略</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Always</td>\n<td>同步写入磁盘，只要有写入就会调用fsync函数；</td>\n</tr>\n<tr>\n<td>Everysec</td>\n<td>每秒调用fsync函数一次，每个命令执行完，先把日志写入 AOF 文件的缓冲区，每隔一秒把缓冲区的内容写入磁盘</td>\n</tr>\n<tr>\n<td>No</td>\n<td>不调用fsync，让操作系统决定何时同步磁盘。每个命令执行完，先将日志写入 AOF 文件的缓冲区，由操作系统决定何时把缓冲区的内容写入磁盘</td>\n</tr>\n</tbody></table>\n<h3 id=\"三种同步策略的优缺点如下：\"><a href=\"#三种同步策略的优缺点如下：\" class=\"headerlink\" title=\"三种同步策略的优缺点如下：\"></a>三种同步策略的优缺点如下：</h3><ul>\n<li>Always：可靠性较高，数据基本不丢失，但是对性能影响较大</li>\n<li>Everysec：性能适中，及时宕机也只会丢失一秒的数据</li>\n<li>No：性能好，但发生当即情况时，</li>\n</ul>\n<h3 id=\"AOF重写\"><a href=\"#AOF重写\" class=\"headerlink\" title=\"AOF重写\"></a>AOF重写</h3><p>我们上面说过，AOF 属于日志追加的形式来存储 Redis 的写指令，虽然有一定的写回策略，但毕竟 AOF 是通过文件的形式记录所有的写命令，但如果指令越来越多的时候，AOF 文件就会越来越大，可能会超出文件大小的限制。如果发生宕机，需要把 AOF 所有的命令重新执行，以用于故障恢复，数据过大的话这个恢复过程越漫长，也会影响 Redis 的使用。因此 Redis 提供 <strong>重写机制</strong>来解决这个问题。</p>\n<p>AOF 重写的过程是通过主线程 fork 后台的 bgrewriteaof 子进程来实现的，可以避免阻塞主进导致性能下降，整个过程如下：</p>\n<ul>\n<li><p>AOF 每次重写，fork 过程会把主线程的内存拷贝一份 bgrewriteaof 子进程，里面包含了数据库的数据，拷贝的是父进程的页表，可以在不影响主进程的情况下逐一把拷贝的数据记入重写日志；</p>\n</li>\n<li><p>因为主线程没有阻塞，仍然可以处理新来的操作，如果这时候存在写操作，会先把操作先放入缓冲区，对于正在使用的日志，如果宕机了这个日志也是齐全的，可以用于恢复；对于正在更新的日志，也不会丢失新的操作，等到数据拷贝完成，就可以将缓冲区的数据写入到新的文件中，保证数据库的最新状态。</p>\n</li>\n</ul>\n<h3 id=\"RDB快照\"><a href=\"#RDB快照\" class=\"headerlink\" title=\"RDB快照\"></a>RDB快照</h3><p>RDB是一种快照存储持久化方式，具体就是将Redis某一时刻的内存数据保存到硬盘的文件当中，默认保存的文件名为dump.rdb，而在Redis服务器启动时，会重新加载dump.rdb文件的数据到内存当中恢复数据。</p>\n<p>为了 RDB 数据恢复的可靠性，在进行快照的时候是全量快照，会将内存中所有的数据都记录到磁盘中，这就有可能会阻塞主线程的执行。Redis 提供了两个命令来生成 RDB 文件，分别是 <strong>save</strong> 和 <strong>bgsave</strong> ：</p>\n<ul>\n<li><strong>save</strong>：执行 save 指令，阻塞 Redis 的其他操作，会导致 Redis 无法响应客户端请求，不建议使用。</li>\n<li><strong>bgsave</strong>：执行 bgsave 指令，Redis 后台创建子进程，异步进行快照的保存操作，此时 Redis 仍然能响应客户端的请求。</li>\n</ul>\n<h3 id=\"自动间隔保存\"><a href=\"#自动间隔保存\" class=\"headerlink\" title=\"自动间隔保存\"></a>自动间隔保存</h3><p>Redis 可以设置间隔性保存，让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时，自动保存一次数据集。比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 10 个键被改动”这一条件时，自动保存一次数据集：save 60 10</p>\n<p>Redis 的默认配置如下，三个设置满足其一就会触发自动保存：</p>\n<blockquote>\n<p>save  60  10000</p>\n<p>save  900  10</p>\n<p>save  300  1</p>\n</blockquote>\n<h3 id=\"RDB模式优点\"><a href=\"#RDB模式优点\" class=\"headerlink\" title=\"RDB模式优点\"></a>RDB模式优点</h3><ul>\n<li>相比AOF在恢复数据的时候需要一条条的执行操作命令，通过RDB文件恢复数据的效率更高；</li>\n<li>同样规模的内存数据，RDB文件数据更加紧凑，磁盘空间占用更小；</li>\n<li>适合全量备份内存数据场景；</li>\n<li>可以根据不同的时间间隔保存RDB文件，在恢复数据的时候可以更加灵活地选择对应版本数据进行恢复</li>\n</ul>\n<h3 id=\"RDB模式缺点\"><a href=\"#RDB模式缺点\" class=\"headerlink\" title=\"RDB模式缺点\"></a>RDB模式缺点</h3><ul>\n<li>由于RDB数据保存存在一定的时间间隔，因此存在丢失缓存数据的风险；</li>\n<li>fork子进程进行RDB文件生成，由于是一次性生成一个内存快照文件，对于服务器磁盘IO以及Redis本身来说都属于重操作，可能会对服务器的磁盘IO造成压力。</li>\n</ul>\n<h3 id=\"混合使用AOF日志和RDB快照\"><a href=\"#混合使用AOF日志和RDB快照\" class=\"headerlink\" title=\"混合使用AOF日志和RDB快照\"></a>混合使用AOF日志和RDB快照</h3><p>Redis4.0 后大部分的使用场景都不会单独使用 RDB 或者 AOF 来做持久化机制，而是兼顾二者的优势混合使用。其原因是 RDB 虽然快，但是会丢失比较多的数据，不能保证数据完整性；AOF 虽然能尽可能保证数据完整性，但是性能确实是一个诟病，比如重放恢复数据。  </p>\n<p>Redis从4.0版本开始引入 RDB-AOF 混合持久化模式，这种模式是基于 AOF 持久化模式构建而来的，混合持久化通过 <strong>aof-use-rdb-preamble yes</strong> 开启。这样的好处是 RDB 快照不需要很频繁的执行，可以避免频繁 fork 对主线程的影响，而且 AOF 日志也只记录两次快照期间的操作，不用记录所有操作，也不会出现文件过大的情况，避免了重写开销。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>本文主要分析了Redis AOF、RDB快照 以及混合持久化的内存数据持久化的机制原理，生产环境中推荐使用混合持久化，这种方式综合了RDB和AOF两种方式的优点。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Redis的持久化机制\"><a href=\"#Redis的持久化机制\" class=\"headerlink\" title=\"Redis的持久化机制\"></a>Redis的持久化机制</h1><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>我们都知道，Redis 的数据存储在内存中, 一旦服务器宕机，内存中的数据将全部丢失。因此，对 Redis 来说，实现数据的持久化，避免从后端数据库中进行恢复，是至关重要的。本篇我们详细讲解下 Redis 的三种持久化机制，分别是 AOF（Append Only File） 日志和 RDB 快照 以及 混合持久化。</p>\n<h3 id=\"AOF机制\"><a href=\"#AOF机制\" class=\"headerlink\" title=\"AOF机制\"></a>AOF机制</h3><p>AOF 日志是写后日志，也就是 Redis 先执行命令，然后将数据写入内存，最后才记录日志，重启时通过执行 AOF 文件中的 Redis 命令来恢复数据。如下图所示：</p>\n<p><img src=\"https://developer.qcloudimg.com/http-save/yehe-10418638/693b4cb76c16876336e4c5a3a06fed27.png\"></p>\n<p>类似MySql bin-log 的原理，AOF 能够解决数据持久化实时性问题，是目前 Redis 持久化机制中主流的方案。</p>\n<h3 id=\"AOF持久化流程\"><a href=\"#AOF持久化流程\" class=\"headerlink\" title=\"AOF持久化流程\"></a>AOF持久化流程</h3><p>AOF 持久化方案进行备份时，客户端所有请求的写命令都会被追加到 AOF 缓冲区中，缓冲区中的数据会根据 Redis 配置文件中配置的同步策略来同步到磁盘上的 AOF 文件中，追加保存每次写的操作到文件末尾。当 AOF 的文件达到重写策略配置的阈值时，Redis 会对 AOF 日志文件进行重写，给 AOF 日志文件瘦身。Redis 服务重启的时候，通过加载 AOF 日志文件来恢复数据。如下图所示：</p>\n<p><img src=\"https://developer.qcloudimg.com/http-save/yehe-10418638/bc15aa10e9c9d41ef356faa07b60cb82.png\"></p>\n<h3 id=\"Redis-AOF-执行流程\"><a href=\"#Redis-AOF-执行流程\" class=\"headerlink\" title=\"Redis AOF 执行流程\"></a>Redis AOF 执行流程</h3><p>AOF 为了避免额外的检查开销，并不会检查命令的正确性，如果先记录日志再执行命令，就有可能记录错误的命令，再通过 AOF 日志恢复数据的时候，就有可能出错，而且在执行完命令后记录日志也不会阻塞当前的写操作。但是 AOF 是存在一定的风险的，首先是如果刚执行一个命令，但是 AOF 文件中还没来得及保存就宕机了，那么这个命令和数据就会有丢失的风险，另外 AOF 虽然可以避免对当前命令的阻塞（因为是先写入再记录日志），但有可能会对下一次操作带来阻塞风险（可能存在写入磁盘较慢的情况）。这两种情况都在于 AOF 什么时候写入磁盘，针对这个问题 AOF 机制提供了三种同步策略（appendfsync 参数）。</p>\n<h3 id=\"AOF-写入磁盘的同步策略\"><a href=\"#AOF-写入磁盘的同步策略\" class=\"headerlink\" title=\"AOF 写入磁盘的同步策略\"></a>AOF 写入磁盘的同步策略</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>同步策略</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Always</td>\n<td>同步写入磁盘，只要有写入就会调用fsync函数；</td>\n</tr>\n<tr>\n<td>Everysec</td>\n<td>每秒调用fsync函数一次，每个命令执行完，先把日志写入 AOF 文件的缓冲区，每隔一秒把缓冲区的内容写入磁盘</td>\n</tr>\n<tr>\n<td>No</td>\n<td>不调用fsync，让操作系统决定何时同步磁盘。每个命令执行完，先将日志写入 AOF 文件的缓冲区，由操作系统决定何时把缓冲区的内容写入磁盘</td>\n</tr>\n</tbody></table>\n<h3 id=\"三种同步策略的优缺点如下：\"><a href=\"#三种同步策略的优缺点如下：\" class=\"headerlink\" title=\"三种同步策略的优缺点如下：\"></a>三种同步策略的优缺点如下：</h3><ul>\n<li>Always：可靠性较高，数据基本不丢失，但是对性能影响较大</li>\n<li>Everysec：性能适中，及时宕机也只会丢失一秒的数据</li>\n<li>No：性能好，但发生当即情况时，</li>\n</ul>\n<h3 id=\"AOF重写\"><a href=\"#AOF重写\" class=\"headerlink\" title=\"AOF重写\"></a>AOF重写</h3><p>我们上面说过，AOF 属于日志追加的形式来存储 Redis 的写指令，虽然有一定的写回策略，但毕竟 AOF 是通过文件的形式记录所有的写命令，但如果指令越来越多的时候，AOF 文件就会越来越大，可能会超出文件大小的限制。如果发生宕机，需要把 AOF 所有的命令重新执行，以用于故障恢复，数据过大的话这个恢复过程越漫长，也会影响 Redis 的使用。因此 Redis 提供 <strong>重写机制</strong>来解决这个问题。</p>\n<p>AOF 重写的过程是通过主线程 fork 后台的 bgrewriteaof 子进程来实现的，可以避免阻塞主进导致性能下降，整个过程如下：</p>\n<ul>\n<li><p>AOF 每次重写，fork 过程会把主线程的内存拷贝一份 bgrewriteaof 子进程，里面包含了数据库的数据，拷贝的是父进程的页表，可以在不影响主进程的情况下逐一把拷贝的数据记入重写日志；</p>\n</li>\n<li><p>因为主线程没有阻塞，仍然可以处理新来的操作，如果这时候存在写操作，会先把操作先放入缓冲区，对于正在使用的日志，如果宕机了这个日志也是齐全的，可以用于恢复；对于正在更新的日志，也不会丢失新的操作，等到数据拷贝完成，就可以将缓冲区的数据写入到新的文件中，保证数据库的最新状态。</p>\n</li>\n</ul>\n<h3 id=\"RDB快照\"><a href=\"#RDB快照\" class=\"headerlink\" title=\"RDB快照\"></a>RDB快照</h3><p>RDB是一种快照存储持久化方式，具体就是将Redis某一时刻的内存数据保存到硬盘的文件当中，默认保存的文件名为dump.rdb，而在Redis服务器启动时，会重新加载dump.rdb文件的数据到内存当中恢复数据。</p>\n<p>为了 RDB 数据恢复的可靠性，在进行快照的时候是全量快照，会将内存中所有的数据都记录到磁盘中，这就有可能会阻塞主线程的执行。Redis 提供了两个命令来生成 RDB 文件，分别是 <strong>save</strong> 和 <strong>bgsave</strong> ：</p>\n<ul>\n<li><strong>save</strong>：执行 save 指令，阻塞 Redis 的其他操作，会导致 Redis 无法响应客户端请求，不建议使用。</li>\n<li><strong>bgsave</strong>：执行 bgsave 指令，Redis 后台创建子进程，异步进行快照的保存操作，此时 Redis 仍然能响应客户端的请求。</li>\n</ul>\n<h3 id=\"自动间隔保存\"><a href=\"#自动间隔保存\" class=\"headerlink\" title=\"自动间隔保存\"></a>自动间隔保存</h3><p>Redis 可以设置间隔性保存，让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时，自动保存一次数据集。比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 10 个键被改动”这一条件时，自动保存一次数据集：save 60 10</p>\n<p>Redis 的默认配置如下，三个设置满足其一就会触发自动保存：</p>\n<blockquote>\n<p>save  60  10000</p>\n<p>save  900  10</p>\n<p>save  300  1</p>\n</blockquote>\n<h3 id=\"RDB模式优点\"><a href=\"#RDB模式优点\" class=\"headerlink\" title=\"RDB模式优点\"></a>RDB模式优点</h3><ul>\n<li>相比AOF在恢复数据的时候需要一条条的执行操作命令，通过RDB文件恢复数据的效率更高；</li>\n<li>同样规模的内存数据，RDB文件数据更加紧凑，磁盘空间占用更小；</li>\n<li>适合全量备份内存数据场景；</li>\n<li>可以根据不同的时间间隔保存RDB文件，在恢复数据的时候可以更加灵活地选择对应版本数据进行恢复</li>\n</ul>\n<h3 id=\"RDB模式缺点\"><a href=\"#RDB模式缺点\" class=\"headerlink\" title=\"RDB模式缺点\"></a>RDB模式缺点</h3><ul>\n<li>由于RDB数据保存存在一定的时间间隔，因此存在丢失缓存数据的风险；</li>\n<li>fork子进程进行RDB文件生成，由于是一次性生成一个内存快照文件，对于服务器磁盘IO以及Redis本身来说都属于重操作，可能会对服务器的磁盘IO造成压力。</li>\n</ul>\n<h3 id=\"混合使用AOF日志和RDB快照\"><a href=\"#混合使用AOF日志和RDB快照\" class=\"headerlink\" title=\"混合使用AOF日志和RDB快照\"></a>混合使用AOF日志和RDB快照</h3><p>Redis4.0 后大部分的使用场景都不会单独使用 RDB 或者 AOF 来做持久化机制，而是兼顾二者的优势混合使用。其原因是 RDB 虽然快，但是会丢失比较多的数据，不能保证数据完整性；AOF 虽然能尽可能保证数据完整性，但是性能确实是一个诟病，比如重放恢复数据。  </p>\n<p>Redis从4.0版本开始引入 RDB-AOF 混合持久化模式，这种模式是基于 AOF 持久化模式构建而来的，混合持久化通过 <strong>aof-use-rdb-preamble yes</strong> 开启。这样的好处是 RDB 快照不需要很频繁的执行，可以避免频繁 fork 对主线程的影响，而且 AOF 日志也只记录两次快照期间的操作，不用记录所有操作，也不会出现文件过大的情况，避免了重写开销。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>本文主要分析了Redis AOF、RDB快照 以及混合持久化的内存数据持久化的机制原理，生产环境中推荐使用混合持久化，这种方式综合了RDB和AOF两种方式的优点。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-09-05T08:19:42.618Z","updated":"2023-09-05T08:18:19.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmixujhl00016oug0509e7tc","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"redis的内存淘汰策略","date":"2023-09-14T04:58:45.000Z","_content":"\n# Redis的内存淘汰策略\n\n### 引言\n\nRedis是一个基于内存的高性能非关系型数据库，主要的特点是高可用，速度快，分布式；在通常的开发中用作缓存来分担数据库的压力。一般情况下，当内存超出物理内存限制时，内存数据将与磁盘产生频繁交换(swap)，swap会导致redis性能急剧下降，对于访问量较大的情况下，swap的存取效率会让服务基本处于不可用的状态。  \n\n在生产环境中，一般不允许redis出现swap行为，redis提供了 maxmemory 设置其最多可占用的内存空间。  \n\n当redis使用的内存超出maxmemory时，此时已经没有多余可用的内存空间，新的数据将无法写入，redis提供了几种数据淘汰策略，用于清理数据，腾出空间以继续提供服务。\n\n### 淘汰策略\n\n1. noeviction\n\n   可读不可写，即不会继续服务写请求，读请求可以继续进行。该策略不会是数据丢失，但由于生产的写请求不可用也同样无法让业务在进行下去，这种策略是默认的。\n\n2. volatile-lru\n\n   淘汰具有过期时间的key，最少使用的key优先淘汰，没有过期时间的key不会被淘汰，该策略可以保证持久化的数据不被丢失。\n\n3. volatile-ttl\n\n   与volatile-lru类似，二者区别是比较过期时间ttl的值，值越小的数据优先淘汰\n\n4. volatile-random\n\n   与2、3类似，区别是随机淘汰有过期时间的key，但不考虑使用频率和过期时间的长短\n\n5. allkeys-lru\n\n   与2类似，区别是该淘汰策略是淘汰redis中所有的key，不区分过期时间，但是区分使用频率。\n\n6. 与 5 类似，范围是所有的key，但是不区分使用频率。\n\nvolatile开头的只会淘汰带有过期时间的key，allkeys则是所有的key，如果redis只是作为缓存使用，可以使用allkeys，如果有些数据是务必持久化的，则使用volatile。\n","source":"_posts/redis的内存淘汰策略.md","raw":"---\ntitle: redis的内存淘汰策略\ndate: 2023-09-14 12:58:45\ntags: redis \n---\n\n# Redis的内存淘汰策略\n\n### 引言\n\nRedis是一个基于内存的高性能非关系型数据库，主要的特点是高可用，速度快，分布式；在通常的开发中用作缓存来分担数据库的压力。一般情况下，当内存超出物理内存限制时，内存数据将与磁盘产生频繁交换(swap)，swap会导致redis性能急剧下降，对于访问量较大的情况下，swap的存取效率会让服务基本处于不可用的状态。  \n\n在生产环境中，一般不允许redis出现swap行为，redis提供了 maxmemory 设置其最多可占用的内存空间。  \n\n当redis使用的内存超出maxmemory时，此时已经没有多余可用的内存空间，新的数据将无法写入，redis提供了几种数据淘汰策略，用于清理数据，腾出空间以继续提供服务。\n\n### 淘汰策略\n\n1. noeviction\n\n   可读不可写，即不会继续服务写请求，读请求可以继续进行。该策略不会是数据丢失，但由于生产的写请求不可用也同样无法让业务在进行下去，这种策略是默认的。\n\n2. volatile-lru\n\n   淘汰具有过期时间的key，最少使用的key优先淘汰，没有过期时间的key不会被淘汰，该策略可以保证持久化的数据不被丢失。\n\n3. volatile-ttl\n\n   与volatile-lru类似，二者区别是比较过期时间ttl的值，值越小的数据优先淘汰\n\n4. volatile-random\n\n   与2、3类似，区别是随机淘汰有过期时间的key，但不考虑使用频率和过期时间的长短\n\n5. allkeys-lru\n\n   与2类似，区别是该淘汰策略是淘汰redis中所有的key，不区分过期时间，但是区分使用频率。\n\n6. 与 5 类似，范围是所有的key，但是不区分使用频率。\n\nvolatile开头的只会淘汰带有过期时间的key，allkeys则是所有的key，如果redis只是作为缓存使用，可以使用allkeys，如果有些数据是务必持久化的，则使用volatile。\n","slug":"redis的内存淘汰策略","published":1,"updated":"2023-09-14T08:53:13.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmixujho00036oug9kbk8aat","content":"<h1 id=\"Redis的内存淘汰策略\"><a href=\"#Redis的内存淘汰策略\" class=\"headerlink\" title=\"Redis的内存淘汰策略\"></a>Redis的内存淘汰策略</h1><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>Redis是一个基于内存的高性能非关系型数据库，主要的特点是高可用，速度快，分布式；在通常的开发中用作缓存来分担数据库的压力。一般情况下，当内存超出物理内存限制时，内存数据将与磁盘产生频繁交换(swap)，swap会导致redis性能急剧下降，对于访问量较大的情况下，swap的存取效率会让服务基本处于不可用的状态。  </p>\n<p>在生产环境中，一般不允许redis出现swap行为，redis提供了 maxmemory 设置其最多可占用的内存空间。  </p>\n<p>当redis使用的内存超出maxmemory时，此时已经没有多余可用的内存空间，新的数据将无法写入，redis提供了几种数据淘汰策略，用于清理数据，腾出空间以继续提供服务。</p>\n<h3 id=\"淘汰策略\"><a href=\"#淘汰策略\" class=\"headerlink\" title=\"淘汰策略\"></a>淘汰策略</h3><ol>\n<li><p>noeviction</p>\n<p>可读不可写，即不会继续服务写请求，读请求可以继续进行。该策略不会是数据丢失，但由于生产的写请求不可用也同样无法让业务在进行下去，这种策略是默认的。</p>\n</li>\n<li><p>volatile-lru</p>\n<p>淘汰具有过期时间的key，最少使用的key优先淘汰，没有过期时间的key不会被淘汰，该策略可以保证持久化的数据不被丢失。</p>\n</li>\n<li><p>volatile-ttl</p>\n<p>与volatile-lru类似，二者区别是比较过期时间ttl的值，值越小的数据优先淘汰</p>\n</li>\n<li><p>volatile-random</p>\n<p>与2、3类似，区别是随机淘汰有过期时间的key，但不考虑使用频率和过期时间的长短</p>\n</li>\n<li><p>allkeys-lru</p>\n<p>与2类似，区别是该淘汰策略是淘汰redis中所有的key，不区分过期时间，但是区分使用频率。</p>\n</li>\n<li><p>与 5 类似，范围是所有的key，但是不区分使用频率。</p>\n</li>\n</ol>\n<p>volatile开头的只会淘汰带有过期时间的key，allkeys则是所有的key，如果redis只是作为缓存使用，可以使用allkeys，如果有些数据是务必持久化的，则使用volatile。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Redis的内存淘汰策略\"><a href=\"#Redis的内存淘汰策略\" class=\"headerlink\" title=\"Redis的内存淘汰策略\"></a>Redis的内存淘汰策略</h1><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>Redis是一个基于内存的高性能非关系型数据库，主要的特点是高可用，速度快，分布式；在通常的开发中用作缓存来分担数据库的压力。一般情况下，当内存超出物理内存限制时，内存数据将与磁盘产生频繁交换(swap)，swap会导致redis性能急剧下降，对于访问量较大的情况下，swap的存取效率会让服务基本处于不可用的状态。  </p>\n<p>在生产环境中，一般不允许redis出现swap行为，redis提供了 maxmemory 设置其最多可占用的内存空间。  </p>\n<p>当redis使用的内存超出maxmemory时，此时已经没有多余可用的内存空间，新的数据将无法写入，redis提供了几种数据淘汰策略，用于清理数据，腾出空间以继续提供服务。</p>\n<h3 id=\"淘汰策略\"><a href=\"#淘汰策略\" class=\"headerlink\" title=\"淘汰策略\"></a>淘汰策略</h3><ol>\n<li><p>noeviction</p>\n<p>可读不可写，即不会继续服务写请求，读请求可以继续进行。该策略不会是数据丢失，但由于生产的写请求不可用也同样无法让业务在进行下去，这种策略是默认的。</p>\n</li>\n<li><p>volatile-lru</p>\n<p>淘汰具有过期时间的key，最少使用的key优先淘汰，没有过期时间的key不会被淘汰，该策略可以保证持久化的数据不被丢失。</p>\n</li>\n<li><p>volatile-ttl</p>\n<p>与volatile-lru类似，二者区别是比较过期时间ttl的值，值越小的数据优先淘汰</p>\n</li>\n<li><p>volatile-random</p>\n<p>与2、3类似，区别是随机淘汰有过期时间的key，但不考虑使用频率和过期时间的长短</p>\n</li>\n<li><p>allkeys-lru</p>\n<p>与2类似，区别是该淘汰策略是淘汰redis中所有的key，不区分过期时间，但是区分使用频率。</p>\n</li>\n<li><p>与 5 类似，范围是所有的key，但是不区分使用频率。</p>\n</li>\n</ol>\n<p>volatile开头的只会淘汰带有过期时间的key，allkeys则是所有的key，如果redis只是作为缓存使用，可以使用allkeys，如果有些数据是务必持久化的，则使用volatile。</p>\n"},{"title":"第一篇博客","date":"2023-09-10T01:30:07.000Z","_content":"\n# 一级标题 \n\n代码测试： \n\n```py \nprint(\"Hello\")\n```\n\n 图片测试： \n\n![](http://mculover666.cn/blog/20191031/R4mWMXsrRKxu.png?imageslim) 引用测试：\n\n> 这是一条引用 \n>\n> ## 二级标题 \n>\n> 无序列表测试：\n>\n> - 哈哈 \n>\n> - 嘿嘿 \n>\n> - 吼吼 \n>\n>   ### 三级标题\n>\n>    #### 四级标题 \n>\n>   \n","source":"_posts/第一篇博客.md","raw":"---\ntitle: 第一篇博客\ndate: 2023-09-10 09:30:07\ntags:\n---\n\n# 一级标题 \n\n代码测试： \n\n```py \nprint(\"Hello\")\n```\n\n 图片测试： \n\n![](http://mculover666.cn/blog/20191031/R4mWMXsrRKxu.png?imageslim) 引用测试：\n\n> 这是一条引用 \n>\n> ## 二级标题 \n>\n> 无序列表测试：\n>\n> - 哈哈 \n>\n> - 嘿嘿 \n>\n> - 吼吼 \n>\n>   ### 三级标题\n>\n>    #### 四级标题 \n>\n>   \n","slug":"第一篇博客","published":1,"updated":"2023-09-10T14:05:23.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmixujhq00046oug9cs86t6o","content":"<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><p>代码测试： </p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p> 图片测试： </p>\n<p><img src=\"http://mculover666.cn/blog/20191031/R4mWMXsrRKxu.png?imageslim\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'> 引用测试：</p>\n<blockquote>\n<p>这是一条引用 </p>\n<h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><p>无序列表测试：</p>\n<ul>\n<li><p>哈哈 </p>\n</li>\n<li><p>嘿嘿 </p>\n</li>\n<li><p>吼吼 </p>\n<h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><p>代码测试： </p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p> 图片测试： </p>\n<p><img src=\"http://mculover666.cn/blog/20191031/R4mWMXsrRKxu.png?imageslim\"> 引用测试：</p>\n<blockquote>\n<p>这是一条引用 </p>\n<h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><p>无序列表测试：</p>\n<ul>\n<li><p>哈哈 </p>\n</li>\n<li><p>嘿嘿 </p>\n</li>\n<li><p>吼吼 </p>\n<h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4></li>\n</ul>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clmixujhe00006oug7t6z3ep3","tag_id":"clmixujhn00026oughzxqgabx","_id":"clmixujhs00066oug0sim4zz9"},{"post_id":"clmixujho00036oug9kbk8aat","tag_id":"clmixujhn00026oughzxqgabx","_id":"clmixujht00076ougdbkxgwtn"}],"Tag":[{"name":"redis","_id":"clmixujhn00026oughzxqgabx"}]}}