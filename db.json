{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Mysql事务的隔离级别.md","hash":"5fb27e9bb83b844fa474d52364470e065b3b019c","modified":1696052462361},{"_id":"source/categories/index.md","hash":"b09ad416c6fd12cf0f773dafb16e2b0ecb8c3f52","modified":1695040726666},{"_id":"source/_posts/Mysql的存储引擎.md","hash":"5bcd36a86f8b1142b59027824269d06d06710f14","modified":1696035797202},{"_id":"source/_posts/Mysql的执行流程.md","hash":"adc160ee00a1b71f99145d792d965aa81813b1b2","modified":1696035399232},{"_id":"source/_posts/Redis的持久化机制.md","hash":"a522d2a7f509e45428d6a6e9a233955c1c3f3141","modified":1695474447538},{"_id":"source/_posts/redis的内存淘汰策略.md","hash":"d05f2e225c9c0fe2462286089d49581f2a619e7e","modified":1695474460598},{"_id":"source/_posts/hello-world.md","hash":"372b7083163ddf84cc7fc3d116675c6810cc2715","modified":1695453855906},{"_id":"source/_posts/第一篇博客.md","hash":"7f4ed1329bf01b0b0c02e598a834173d1dcf0358","modified":1695453855918},{"_id":"source/_posts/redis的崩溃问题.md","hash":"1947f3cb8b06811969087a81d0d11afa65b67a33","modified":1695474431165},{"_id":"source/tags/index.md","hash":"e68910881fee3db91667d503228c946cb058b981","modified":1695040900956},{"_id":"source/_posts/Mysql的执行流程/20210711173835627.jpg","hash":"6945979dfe367a7a0a20db20d62adfe623d99295","modified":1696035068787},{"_id":"source/_posts/Mysql的存储引擎/show engines.jpg","hash":"6bd262322f07f5868c84f4f312a51b5bad2573b1","modified":1696035549418},{"_id":"themes/butterfly/package.json","hash":"a6a032654a36408d7b7274bc9cfe21f89946d29c","modified":1695435852382},{"_id":"themes/butterfly/README.md","hash":"5ca893c78f8971f512da55c785b8ccbfa9d37cfc","modified":1695435852326},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1695435852325},{"_id":"themes/butterfly/README_CN.md","hash":"f6ae7f38d016135340fd25c5fd1be65452b6773d","modified":1695435852326},{"_id":"themes/butterfly/_config.butterfly.yml","hash":"b684e7cc1100d22a59a13ec48d09b1eef0610e34","modified":1695521181113},{"_id":"themes/butterfly/plugins.yml","hash":"6d68dab3b79accb1bceb4710c8aaab724a45053a","modified":1695435852383},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1695435852330},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"cc8672dc0c2762b694f689cbeb6e34810f1c194e","modified":1695435852328},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1695435852330},{"_id":"themes/butterfly/languages/en.yml","hash":"4957fd976c99745d3aa24000a85b2955e8d1cf81","modified":1695435852328},{"_id":"themes/butterfly/languages/default.yml","hash":"d444cbb5c5456aaf27f3fb1b4308634689c7bb53","modified":1695435852328},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1695435852382},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1695435852380},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1695435852324},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1695435852382},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"145ec301db185c8a06de1f34a77ca391e1d2729b","modified":1695435852329},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1695435852381},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1695435852385},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1695435852325},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1695435852323},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1695435852385},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"92683cb785a29e5a73701b33dba73d3afac268c3","modified":1695435852323},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1695435852385},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1695435852323},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1695435852385},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1695435852386},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1695435852387},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1695435852387},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"a3323fcb11cfd3f3e21230737341beb5d76b40aa","modified":1695435852388},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1695435852389},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1695435852388},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"7222102f9919f8e961d4f1688425845fb7775ada","modified":1695435852389},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"6005907245dd74b153f03afdccfae1abb66bb482","modified":1695435852390},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1695435852390},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"8ff03b35385f9162e1eb54dceb5fa7f781306caf","modified":1695435852389},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1695435852391},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"b8d95ac1851c37f1dce4b1dd4a1d3ffdff501a03","modified":1695435852391},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1695435852391},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1695435852392},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1695435852393},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1695435852392},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1695435852392},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"fc5a80707cf522378be3cf8638ef78bccc88c510","modified":1695435852394},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1695435852393},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1695435852394},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1695435852394},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1695435852416},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1695435852417},{"_id":"themes/butterfly/source/js/main.js","hash":"4fd1cd7a02dedcb686caf6149c35fd8e1fbcafc9","modified":1695435852419},{"_id":"themes/butterfly/source/css/var.styl","hash":"e1e37a2e932163886789b72624c7348545003f1d","modified":1695435852416},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1695435852417},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1695435852418},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1695435852331},{"_id":"themes/butterfly/source/js/utils.js","hash":"13b2b02118a0f4ec2e9e0bb1b90f5b1a30a70f44","modified":1695435852421},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1695435852332},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"50eea5aa78cdeb6c72dd22f0aeabc407cc0f712e","modified":1695435852331},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"a102a6cacf7b20183946a54580867a964f3674c4","modified":1695435852421},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9277fead4c29dbe93976f078adaa26e8f9253da3","modified":1695435852347},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"b50b0afdc41c54279587410c3f82c8cb3c5ff46d","modified":1695435852332},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1695435852345},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"96df62e34661d8ca4a45267286127479e5178a79","modified":1695435852340},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"c55f05400eb27ab051f47396ec8d4249ce6f71ec","modified":1695435852347},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"9893656128c347d1c09c90784627c84c979b326f","modified":1695435852396},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1695435852400},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"431b4a252443e224872bd6b4f6aa76ed1679a82c","modified":1695435852395},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"e43017dbc73e0ce95dcfcb9dfb4fcce0c1715dd4","modified":1695435852397},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1695435852415},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"9066a62e442affce3a923a06a90486bf9d364e0e","modified":1695435852406},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"4c86c10f8ec0c8fb60b400a5a2f14699d3155be4","modified":1695435852407},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"37db99299af380e9111dce2a78a5049b301b13e0","modified":1695435852409},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1695435852401},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"0b23010154e19f37f0c4af0110f9f834d6d41a13","modified":1695435852410},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"cf90ea339fbb7f345212319627fcd68964024e40","modified":1695435852410},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"5e27f7842af82ff7498d4b59787ce9ca90fa9e6f","modified":1695435852402},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"20303c0dad28e5c5335ce2fa6582f1fafae5b628","modified":1695435852402},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"3969f599e8657adf8c3ce287d83f5d0a23f276a9","modified":1695435852401},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1695435852401},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1695435852402},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1695435852404},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1695435852403},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1695435852404},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"fc029f5e00d7904c0878efd20dd4e09fc55e1d03","modified":1695435852403},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"824b2b2d2ee72583b9e009c0bb13e29e806534cc","modified":1695435852404},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1695435852405},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1695435852408},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"15ea7564b2e3bf46bc91fb6e49c94d057b37caaf","modified":1695435852405},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1695435852407},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1695435852409},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1695435852407},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1695435852408},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"df7a51fcabbadab5aa31770e3202a47c9599bbb7","modified":1695435852408},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"57d333ef47bfb8fd22da31f600527c9d91e8e322","modified":1695435852408},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1695435852411},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"bbe930d8425bdaee2a5ba3cade42b617cee42934","modified":1695435852420},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"40e76d6da538cb3c1ef6b79ffc0adfa64fe6b8ba","modified":1695435852420},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1695435852412},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1695435852411},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"7c463ba25b3b54f0f46dfd75971d792816e942a8","modified":1695435852411},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1695435852413},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1695435852412},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1695435852414},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"1bef867c799ba158c5417272fb137539951aa120","modified":1695435852337},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"962ee70a35e60a13c31eea47d16b9f98069fe417","modified":1695435852338},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1695435852415},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1695435852414},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"7a641b5dd45b970e1dafd1433eb32ea149e55cf2","modified":1695435852339},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1695435852338},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1695435852333},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1695435852333},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1695435852334},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"50b4b9c7f6a4771910be4198639cfcfc6d7b8925","modified":1695435852339},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"f5207840c96df6b26ad227433babca4f8c362624","modified":1695435852334},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1695435852335},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1695435852335},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1695435852336},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1695435852337},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fd55f0e09827ef40c53c48d184a553464aac3e03","modified":1695435852336},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1695435852341},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1695435852342},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"a6fde4835d6460ce7baf792fd5e1977fad73db25","modified":1695435852341},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1695435852343},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"3adb731465a4ab14529277fd7867889e0800ad16","modified":1695435852342},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"766baca6ddce49d1724a02312387b292ff2d0bdc","modified":1695435852340},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"e37681bc9c169d4220f26ecda2b3d5c02b6b9a0f","modified":1695435852344},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1695435852343},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"12be059c536490af216a397e8f2a7abbf6d4610e","modified":1695435852345},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1695435852349},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1695435852346},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1695435852370},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1695435852370},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1695435852345},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1695435852363},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1695435852376},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1695435852376},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1695435852376},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"82bb447a5d045980789cf3f9de9d49cc32011b13","modified":1695435852370},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"dfb5e16a7e7106bb20b2ac2d0df1251d0fc79609","modified":1695435852374},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1695435852376},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1695435852377},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"8e22f53886a57a68286970d8af8b4c950fd4a1d7","modified":1695435852377},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1695435852377},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1695435852378},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"ab037bf5794638bd30da4cf7cf106e5d03b5f696","modified":1695435852376},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1695435852379},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1695435852379},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1695435852378},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"ba94ceb40d7c81372a76103d958dcc2cc6a84f00","modified":1695435852380},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1695435852399},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1695435852399},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"58f37823f6cd9a194fb50f7ca7c2233e49939034","modified":1695435852349},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1695435852400},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1695435852398},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"0010c7a10d265c4329f0fd4db85b4a9ea7ba06b5","modified":1695435852348},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1695435852398},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"1157118db9f5d7c0c5a0fc7c346f6e934ca00d52","modified":1695435852355},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"09d2ab2570b67e6f09244a898ccab5567cb82ace","modified":1695435852354},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"08a85e52fc800d3562df869e5e2613313e76fce6","modified":1695435852354},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"0d960849d5b05d27ec87627b983ca35f2411b9e8","modified":1695435852354},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1695435852350},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"799da8f3015e6fe440681b21644bcb3810a5518c","modified":1695435852355},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"6d40b521eec4136f6742c548a4445ed593470b1b","modified":1695435852356},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1695435852351},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"19b5cfa1f77781246e02967cefe149f19170e45f","modified":1695435852350},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1695435852351},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1695435852352},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"7e233f872aea6fd6beccdc9efd86b1bf9ec9f12d","modified":1695435852352},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"c42bbce31fcd8846cf3360f4c383dec9368daeba","modified":1695435852353},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4b98145d6584d586cabf033493282afc72ae816a","modified":1695435852351},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"b19b123df682b23491b17dcca386d79062cd8f6e","modified":1695435852357},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f8b73bc63ec1b45d86aa3891d8c81ef4d5980943","modified":1695435852357},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"7c7fbe27d82becc9ee509765f1195c69f5864a0b","modified":1695435852359},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"b47698e153c73cb29286b19bec5ddd920cb7ffba","modified":1695435852356},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"c5e131d65a7ad30f3cb98ac3b94cd2f6a94c22e9","modified":1695435852359},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4bb4cf58e219dfb8787273c931b1ea978b2ab88f","modified":1695435852361},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"1a20b11fa0e6b1943e9b4d81e197a25ca36af66d","modified":1695435852358},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"a56edeb1ce2f1b1fb0e866a30543f274b9f7d69e","modified":1695435852358},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f618457d62ef35d78a31e7fb1e375a462f64b228","modified":1695435852360},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1695435852360},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1695435852360},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1695435852361},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"6b0d28671afd5ed286a714f25ba16256a2e7d880","modified":1695435852362},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"386a2b371644c2682560733617561ba6e6bf9ab2","modified":1695435852361},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1695435852364},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1695435852364},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"bb944185f4bb9f9a9b9d70ee215f66ccd6d4c6cf","modified":1695435852364},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"da94966a9650ef3e4c69f3ee93758b30fa42cb78","modified":1695435852365},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"cfcfaed3a52fa47fff4cc65a053a2f025fb3b7b6","modified":1695435852366},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"a6be932d1f64c6190f5d03b5b77fba09fa0fd6b8","modified":1695435852366},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"4f8bd22c5c32d5430cbe08ab4e861b6f8b86f820","modified":1695435852367},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1695435852367},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"4fb998a05e51ef2302775945883307ee3039a544","modified":1695435852368},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"2f3af113713563e34b10bbe998cc15008f81c85a","modified":1695435852370},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"ce4ab79c85df9f77395269eb01e9a023d7f96376","modified":1695435852369},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"edd4ebf76a79fb74cfae03a286fab90f74324dbd","modified":1695435852368},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"90338ac4cd114d324fe1caaaeea8be9ca05d6a46","modified":1695435852371},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1695435852373},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"4b9c35375e0eb9cf99ad246d5ca838eca64a635d","modified":1695435852372},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1695435852372},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1695435852373},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1695435852373},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1695435852374},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"ba04174d977da988a1d49c06641262c413352346","modified":1695435852371},{"_id":"public/atom.xml","hash":"cb7b9c464eb25f177751649f48ee6469c8471730","modified":1696052506742},{"_id":"public/search.xml","hash":"47d8d7a56e3f21b2f9a24716dffc26ef094d2e3f","modified":1696052506742},{"_id":"public/sitemap.xml","hash":"2215657a9eb0fdb0aada78d9cac642372c59c6fc","modified":1696052506742},{"_id":"public/baidusitemap.xml","hash":"15b66776b097204053da35a963df02a103306111","modified":1696052506742},{"_id":"public/tags/index.html","hash":"ad82a3435bb3a42240f60e91cf71ba07a9e3c544","modified":1696052506742},{"_id":"public/posts/f3c852d2.html","hash":"d14dcbd7ab173043d8cb8905aec9f6d4dc0f7f2b","modified":1696052506742},{"_id":"public/categories/index.html","hash":"4c87143e999e24c5532e451c57a4d8ff83c1bfa0","modified":1696052506742},{"_id":"public/posts/10a134a.html","hash":"a2c63186c7de8bd09fed246a44c71d3c88435063","modified":1696052506742},{"_id":"public/posts/153f114c.html","hash":"3c1f95b0a72e81ce9d7f07c671152ebb68515a00","modified":1696052506742},{"_id":"public/posts/67748aab.html","hash":"04bcefce3d29abd5245c8b9301c4c693391c3323","modified":1696052506742},{"_id":"public/posts/711efdca.html","hash":"f4f2a2328c1e782c7a0684cbbabe1f4e22572ec1","modified":1696052506742},{"_id":"public/posts/e5adb42e.html","hash":"97eadbac62447f3563b3102e923c50ccb68a6c30","modified":1696052506742},{"_id":"public/posts/ff05b5bf.html","hash":"4e0d7d32f09b316cd6c764cd8125082ad62bbeae","modified":1696052506742},{"_id":"public/posts/4a17b156.html","hash":"ef62f9f84c4df9c4f0f611d899566df60929ddd9","modified":1696052506742},{"_id":"public/archives/index.html","hash":"081df392a8175140bf3206db264b8769195da6c9","modified":1696052506742},{"_id":"public/index.html","hash":"aa0149ba05e1f74f221e07ba4ffb50499761cbf3","modified":1696052506742},{"_id":"public/archives/2023/index.html","hash":"5989254d0217ddd8ede7c3ae73be49794a7895a6","modified":1696052506742},{"_id":"public/archives/2023/09/index.html","hash":"7c1e871310a0c8ca7240e4eabf12ff9ec5945623","modified":1696052506742},{"_id":"public/categories/中间件/index.html","hash":"b53d9a61fd7c2339d991ad9559a685e5a11e6855","modified":1696052506742},{"_id":"public/tags/redis/index.html","hash":"d4a72247bfd6e46e6376c143e160bb939310e5a1","modified":1696052506742},{"_id":"public/tags/Mysql/index.html","hash":"3c91c583731d1a0a7e544d02bf7fe723da78406b","modified":1696052506742},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1696052506742},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1696052506742},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1696052506742},{"_id":"public/posts/10a134a/20210711173835627.jpg","hash":"6945979dfe367a7a0a20db20d62adfe623d99295","modified":1696052506742},{"_id":"public/live2dw/assets/koharu.model.json","hash":"ceccdefd776b7c9475a29cff0842796e4f58b7e9","modified":1696052506742},{"_id":"public/live2dw/assets/koharu.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1696052506742},{"_id":"public/live2dw/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1696052506742},{"_id":"public/live2dw/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1696052506742},{"_id":"public/live2dw/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1696052506742},{"_id":"public/live2dw/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1696052506742},{"_id":"public/live2dw/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1696052506742},{"_id":"public/live2dw/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1696052506742},{"_id":"public/live2dw/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1696052506742},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1696052506742},{"_id":"public/live2dw/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1696052506742},{"_id":"public/live2dw/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1696052506742},{"_id":"public/live2dw/assets/mtn/idle.mtn","hash":"058d4628ab04bf42c279501ba4fa37116d384e41","modified":1696052506742},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1696052506742},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1696052506742},{"_id":"public/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1696052506742},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1696052506742},{"_id":"public/css/index.css","hash":"d2ac9ea2eda7e3436cf544deaafd55ae1e3a81e3","modified":1696052506742},{"_id":"public/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1696052506742},{"_id":"public/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1696052506742},{"_id":"public/posts/67748aab/show engines.jpg","hash":"6bd262322f07f5868c84f4f312a51b5bad2573b1","modified":1696052506742},{"_id":"public/live2dw/assets/moc/koharu.moc","hash":"5eec3fba21444dd6f774b913510b5955e2c0605b","modified":1696052506742},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1696052506742},{"_id":"public/live2dw/assets/moc/koharu.2048/texture_00.png","hash":"0879b61b745084781722636bba9f278f31ce5fc1","modified":1696052506742},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1696052506742},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1696052506742}],"Category":[{"name":"中间件","_id":"cln5lvfbz0004fwugghf39xjq"}],"Data":[],"Page":[{"title":"文章分类","date":"2023-09-18T12:37:54.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2023-09-18 20:37:54\ntype: \"categories\"\n---\n","updated":"2023-09-18T12:38:46.666Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cln5lvfbw0001fwug0c335qw7","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"title":"文章标签","date":"2023-09-18T12:41:00.000Z","tags":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 文章标签\ndate: 2023-09-18 20:41:00\ntags: \"tags\"\n---\n","updated":"2023-09-18T12:41:40.956Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cln5lvfby0003fwug2ivjgwlr","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""}],"Post":[{"title":"Mysql事务的隔离级别","date":"2023-09-30T04:49:29.000Z","_content":"\n# Mysql事务的隔离级别\n\n### 引言\n\n我们之前介绍过Mysql的存储引擎，其中只有InnoDB支持事务，然而提到事务就一定会考虑到隔离级别，今天我们来整理一下Mysql事务的四大隔离级别相关知识，希望对大家有所帮助。\n\n### Mysql事务\n\n数据库事务指的是一组数据操作，事务内的操作要么就全部成功，要么就全部失败，什么都不做，其实不是没做，是可能只做了一部分，但只要有一步失败，就要回滚所有操作。\n\n在事务的使用中，我们会遇到一些相关问题，一般会有三种情况：**脏读**、**不可重复读**、**幻读**，这是事务并发可能会出现的情况。\n\n#### 脏读（Dirty Read）\n\n> 脏读指的是：一个事务读到了另一个未提交事务修改过的数据，未提交意味着这些数据可能会回滚，也可能最终没有保存到数据库中，所以就导致了读到的数据不一定是真实的数据。这就是脏读。\n\n#### 不可重复读\n\n> 可重复读指的是在同一个事务内，不同的时刻读到的同一批数据可能是不一样的，可能会受到其他事务的影响，比如当一个事务在大量读取数据时，有一其他事务对该数据进行了修改，这就会导致之后读取到的数据会与修改前不一致。这就是不可重复读，通常针对数据更新（update）操作。\n\n#### 幻读\n\n> 幻读是针对数据**插入（insert）**操作来说的。假设事务A对某些数据做了修改，但是还没有提交事务，此时事务B插入了与事务A更改前的记录相同的数据，并且在事务A提交之前提交了，而这时，在事务A中查询，会发现好像刚刚的更改对某些数据不起作用，但这其实是事务B插入进来的，对于用户来说，就想中了幻术一样，这就是幻读。\n\n这三种是事务的实现中会发生的三种异常，使用Mysql定义的隔离级别可以避免它，我们之前讲过，Mysql的事务实现逻辑是位于引擎层的，但不是所有存储引擎都支持事务，下面我们所讲述的隔离级别都是以InnoDB存储引擎来描述。\n\n#### 定义\n\n隔离性（isolation）指的是不同事务先后提交并执行后，最终呈现出来的效果是串行的，也就是说，对于事务来说，它在执行过程中，感知到的数据变化应该只有自己操作引起的，不存在其他事务引发的数据变化。\n\n**隔离性解决的是并发事务出现的问题**。\n\n### SQL的隔离级别\n\n隔离性最简单的实现方式就是各个事务都串行执行了，如果前面的事务还没有执行完毕，后面的事务就都等待。但是这样的实现方式很明显并发效率不高，并不适合在实际环境中使用。\n\n为了解决上述问题，实现不同程度的并发控制，SQL的标准制定者提出了不同的隔离级别：未提交读（read uncommitted）、提交读（read committed）、可重复读（repeatable read）、序列化读（serializable）。其中最高级隔离级别就是序列化读，而在其他隔离级别中，由于事务是并发执行的，所以或多或少允许出现一些问题。见以下的矩阵表：\n\n| 隔离级别（+:允许出现，-：不允许出现） | 脏读 | 不可重复读 | 幻读 |\n| :------------------------------------ | :--: | :--------: | :--: |\n| 读未提交（RU）                        |  +   |     +      |  +   |\n| 读已提交                              |  -   |     +      |  +   |\n| 可重复度                              |  -   |     -      |  +   |\n| 序列化                                |  -   |     -      |  -   |\n\n**注意，MySQL的InnoDB引擎在提交读级别通过MVCC解决了不可重复读的问题，在可重复读级别通过间隙锁解决了幻读问题，具体见下面的分析**。\n\n#### 实现原理\n\n**标准SQL事务隔离级别实现原理**\n\n我们上面遇到的问题其实就是并发事务下的控制问题，解决并发事务的最常见方式就是悲观并发控制了（也就是数据库中的锁）。标准SQL事务隔离级别的实现是依赖锁的，我们来看下具体是怎么实现的：\n\n| 事务隔离级别   | 实现方式                                                     |\n| -------------- | ------------------------------------------------------------ |\n| 读未提交（RU） | 事务对当前被读取的数据不加锁； 事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加**行级共享锁**，直到事务结束才释放。 |\n| 读已提交（RC） | 事务对当前被读取的数据加**行级共享锁（当读到时才加锁）**，一旦读完该行，立即释放该行级共享锁； 事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加**行级排他锁**，直到事务结束才释放。 |\n| 可重复读（RR） | 事务在读取某数据的瞬间（就是开始读取的瞬间），必须先对其加**行级共享锁**，直到事务结束才释放； 事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加**行级排他锁**，直到事务结束才释放。 |\n| 序列化（S）    | 事务在读取数据时，必须先对其加**表级共享锁** ，直到事务结束才释放； 事务在更新数据时，必须先对其加**表级排他锁** ，直到事务结束才释放。 |\n\n可以看到，在只使用锁来实现隔离级别的控制的时候，需要频繁的加锁解锁，而且很容易发生读写的冲突（例如在RC级别下，事务A更新了数据行1，事务B则在事务A提交前读取数据行1都要等待事务A提交并释放锁）。\n\n### 结束\n\n以上就是我对Mysql的隔离级别的一些看法和总结，欢迎小伙伴在评论区补充。\n","source":"_posts/Mysql事务的隔离级别.md","raw":"---\ntitle: Mysql事务的隔离级别\ndate: 2023-09-30 12:49:29\ncategories:\n - 中间件\ntags:\n - Mysql\n---\n\n# Mysql事务的隔离级别\n\n### 引言\n\n我们之前介绍过Mysql的存储引擎，其中只有InnoDB支持事务，然而提到事务就一定会考虑到隔离级别，今天我们来整理一下Mysql事务的四大隔离级别相关知识，希望对大家有所帮助。\n\n### Mysql事务\n\n数据库事务指的是一组数据操作，事务内的操作要么就全部成功，要么就全部失败，什么都不做，其实不是没做，是可能只做了一部分，但只要有一步失败，就要回滚所有操作。\n\n在事务的使用中，我们会遇到一些相关问题，一般会有三种情况：**脏读**、**不可重复读**、**幻读**，这是事务并发可能会出现的情况。\n\n#### 脏读（Dirty Read）\n\n> 脏读指的是：一个事务读到了另一个未提交事务修改过的数据，未提交意味着这些数据可能会回滚，也可能最终没有保存到数据库中，所以就导致了读到的数据不一定是真实的数据。这就是脏读。\n\n#### 不可重复读\n\n> 可重复读指的是在同一个事务内，不同的时刻读到的同一批数据可能是不一样的，可能会受到其他事务的影响，比如当一个事务在大量读取数据时，有一其他事务对该数据进行了修改，这就会导致之后读取到的数据会与修改前不一致。这就是不可重复读，通常针对数据更新（update）操作。\n\n#### 幻读\n\n> 幻读是针对数据**插入（insert）**操作来说的。假设事务A对某些数据做了修改，但是还没有提交事务，此时事务B插入了与事务A更改前的记录相同的数据，并且在事务A提交之前提交了，而这时，在事务A中查询，会发现好像刚刚的更改对某些数据不起作用，但这其实是事务B插入进来的，对于用户来说，就想中了幻术一样，这就是幻读。\n\n这三种是事务的实现中会发生的三种异常，使用Mysql定义的隔离级别可以避免它，我们之前讲过，Mysql的事务实现逻辑是位于引擎层的，但不是所有存储引擎都支持事务，下面我们所讲述的隔离级别都是以InnoDB存储引擎来描述。\n\n#### 定义\n\n隔离性（isolation）指的是不同事务先后提交并执行后，最终呈现出来的效果是串行的，也就是说，对于事务来说，它在执行过程中，感知到的数据变化应该只有自己操作引起的，不存在其他事务引发的数据变化。\n\n**隔离性解决的是并发事务出现的问题**。\n\n### SQL的隔离级别\n\n隔离性最简单的实现方式就是各个事务都串行执行了，如果前面的事务还没有执行完毕，后面的事务就都等待。但是这样的实现方式很明显并发效率不高，并不适合在实际环境中使用。\n\n为了解决上述问题，实现不同程度的并发控制，SQL的标准制定者提出了不同的隔离级别：未提交读（read uncommitted）、提交读（read committed）、可重复读（repeatable read）、序列化读（serializable）。其中最高级隔离级别就是序列化读，而在其他隔离级别中，由于事务是并发执行的，所以或多或少允许出现一些问题。见以下的矩阵表：\n\n| 隔离级别（+:允许出现，-：不允许出现） | 脏读 | 不可重复读 | 幻读 |\n| :------------------------------------ | :--: | :--------: | :--: |\n| 读未提交（RU）                        |  +   |     +      |  +   |\n| 读已提交                              |  -   |     +      |  +   |\n| 可重复度                              |  -   |     -      |  +   |\n| 序列化                                |  -   |     -      |  -   |\n\n**注意，MySQL的InnoDB引擎在提交读级别通过MVCC解决了不可重复读的问题，在可重复读级别通过间隙锁解决了幻读问题，具体见下面的分析**。\n\n#### 实现原理\n\n**标准SQL事务隔离级别实现原理**\n\n我们上面遇到的问题其实就是并发事务下的控制问题，解决并发事务的最常见方式就是悲观并发控制了（也就是数据库中的锁）。标准SQL事务隔离级别的实现是依赖锁的，我们来看下具体是怎么实现的：\n\n| 事务隔离级别   | 实现方式                                                     |\n| -------------- | ------------------------------------------------------------ |\n| 读未提交（RU） | 事务对当前被读取的数据不加锁； 事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加**行级共享锁**，直到事务结束才释放。 |\n| 读已提交（RC） | 事务对当前被读取的数据加**行级共享锁（当读到时才加锁）**，一旦读完该行，立即释放该行级共享锁； 事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加**行级排他锁**，直到事务结束才释放。 |\n| 可重复读（RR） | 事务在读取某数据的瞬间（就是开始读取的瞬间），必须先对其加**行级共享锁**，直到事务结束才释放； 事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加**行级排他锁**，直到事务结束才释放。 |\n| 序列化（S）    | 事务在读取数据时，必须先对其加**表级共享锁** ，直到事务结束才释放； 事务在更新数据时，必须先对其加**表级排他锁** ，直到事务结束才释放。 |\n\n可以看到，在只使用锁来实现隔离级别的控制的时候，需要频繁的加锁解锁，而且很容易发生读写的冲突（例如在RC级别下，事务A更新了数据行1，事务B则在事务A提交前读取数据行1都要等待事务A提交并释放锁）。\n\n### 结束\n\n以上就是我对Mysql的隔离级别的一些看法和总结，欢迎小伙伴在评论区补充。\n","slug":"Mysql事务的隔离级别","published":1,"updated":"2023-09-30T05:41:02.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln5lvfbp0000fwugf74679zm","content":"<h1 id=\"Mysql事务的隔离级别\"><a href=\"#Mysql事务的隔离级别\" class=\"headerlink\" title=\"Mysql事务的隔离级别\"></a>Mysql事务的隔离级别</h1><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>我们之前介绍过Mysql的存储引擎，其中只有InnoDB支持事务，然而提到事务就一定会考虑到隔离级别，今天我们来整理一下Mysql事务的四大隔离级别相关知识，希望对大家有所帮助。</p>\n<h3 id=\"Mysql事务\"><a href=\"#Mysql事务\" class=\"headerlink\" title=\"Mysql事务\"></a>Mysql事务</h3><p>数据库事务指的是一组数据操作，事务内的操作要么就全部成功，要么就全部失败，什么都不做，其实不是没做，是可能只做了一部分，但只要有一步失败，就要回滚所有操作。</p>\n<p>在事务的使用中，我们会遇到一些相关问题，一般会有三种情况：<strong>脏读</strong>、<strong>不可重复读</strong>、<strong>幻读</strong>，这是事务并发可能会出现的情况。</p>\n<h4 id=\"脏读（Dirty-Read）\"><a href=\"#脏读（Dirty-Read）\" class=\"headerlink\" title=\"脏读（Dirty Read）\"></a>脏读（Dirty Read）</h4><blockquote>\n<p>脏读指的是：一个事务读到了另一个未提交事务修改过的数据，未提交意味着这些数据可能会回滚，也可能最终没有保存到数据库中，所以就导致了读到的数据不一定是真实的数据。这就是脏读。</p>\n</blockquote>\n<h4 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h4><blockquote>\n<p>可重复读指的是在同一个事务内，不同的时刻读到的同一批数据可能是不一样的，可能会受到其他事务的影响，比如当一个事务在大量读取数据时，有一其他事务对该数据进行了修改，这就会导致之后读取到的数据会与修改前不一致。这就是不可重复读，通常针对数据更新（update）操作。</p>\n</blockquote>\n<h4 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h4><blockquote>\n<p>幻读是针对数据<strong>插入（insert）</strong>操作来说的。假设事务A对某些数据做了修改，但是还没有提交事务，此时事务B插入了与事务A更改前的记录相同的数据，并且在事务A提交之前提交了，而这时，在事务A中查询，会发现好像刚刚的更改对某些数据不起作用，但这其实是事务B插入进来的，对于用户来说，就想中了幻术一样，这就是幻读。</p>\n</blockquote>\n<p>这三种是事务的实现中会发生的三种异常，使用Mysql定义的隔离级别可以避免它，我们之前讲过，Mysql的事务实现逻辑是位于引擎层的，但不是所有存储引擎都支持事务，下面我们所讲述的隔离级别都是以InnoDB存储引擎来描述。</p>\n<h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>隔离性（isolation）指的是不同事务先后提交并执行后，最终呈现出来的效果是串行的，也就是说，对于事务来说，它在执行过程中，感知到的数据变化应该只有自己操作引起的，不存在其他事务引发的数据变化。</p>\n<p><strong>隔离性解决的是并发事务出现的问题</strong>。</p>\n<h3 id=\"SQL的隔离级别\"><a href=\"#SQL的隔离级别\" class=\"headerlink\" title=\"SQL的隔离级别\"></a>SQL的隔离级别</h3><p>隔离性最简单的实现方式就是各个事务都串行执行了，如果前面的事务还没有执行完毕，后面的事务就都等待。但是这样的实现方式很明显并发效率不高，并不适合在实际环境中使用。</p>\n<p>为了解决上述问题，实现不同程度的并发控制，SQL的标准制定者提出了不同的隔离级别：未提交读（read uncommitted）、提交读（read committed）、可重复读（repeatable read）、序列化读（serializable）。其中最高级隔离级别就是序列化读，而在其他隔离级别中，由于事务是并发执行的，所以或多或少允许出现一些问题。见以下的矩阵表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">隔离级别（+:允许出现，-：不允许出现）</th>\n<th align=\"center\">脏读</th>\n<th align=\"center\">不可重复读</th>\n<th align=\"center\">幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">读未提交（RU）</td>\n<td align=\"center\">+</td>\n<td align=\"center\">+</td>\n<td align=\"center\">+</td>\n</tr>\n<tr>\n<td align=\"left\">读已提交</td>\n<td align=\"center\">-</td>\n<td align=\"center\">+</td>\n<td align=\"center\">+</td>\n</tr>\n<tr>\n<td align=\"left\">可重复度</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">+</td>\n</tr>\n<tr>\n<td align=\"left\">序列化</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n</tbody></table>\n<p><strong>注意，MySQL的InnoDB引擎在提交读级别通过MVCC解决了不可重复读的问题，在可重复读级别通过间隙锁解决了幻读问题，具体见下面的分析</strong>。</p>\n<h4 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h4><p><strong>标准SQL事务隔离级别实现原理</strong></p>\n<p>我们上面遇到的问题其实就是并发事务下的控制问题，解决并发事务的最常见方式就是悲观并发控制了（也就是数据库中的锁）。标准SQL事务隔离级别的实现是依赖锁的，我们来看下具体是怎么实现的：</p>\n<table>\n<thead>\n<tr>\n<th>事务隔离级别</th>\n<th>实现方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>读未提交（RU）</td>\n<td>事务对当前被读取的数据不加锁； 事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加<strong>行级共享锁</strong>，直到事务结束才释放。</td>\n</tr>\n<tr>\n<td>读已提交（RC）</td>\n<td>事务对当前被读取的数据加<strong>行级共享锁（当读到时才加锁）</strong>，一旦读完该行，立即释放该行级共享锁； 事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加<strong>行级排他锁</strong>，直到事务结束才释放。</td>\n</tr>\n<tr>\n<td>可重复读（RR）</td>\n<td>事务在读取某数据的瞬间（就是开始读取的瞬间），必须先对其加<strong>行级共享锁</strong>，直到事务结束才释放； 事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加<strong>行级排他锁</strong>，直到事务结束才释放。</td>\n</tr>\n<tr>\n<td>序列化（S）</td>\n<td>事务在读取数据时，必须先对其加<strong>表级共享锁</strong> ，直到事务结束才释放； 事务在更新数据时，必须先对其加<strong>表级排他锁</strong> ，直到事务结束才释放。</td>\n</tr>\n</tbody></table>\n<p>可以看到，在只使用锁来实现隔离级别的控制的时候，需要频繁的加锁解锁，而且很容易发生读写的冲突（例如在RC级别下，事务A更新了数据行1，事务B则在事务A提交前读取数据行1都要等待事务A提交并释放锁）。</p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>以上就是我对Mysql的隔离级别的一些看法和总结，欢迎小伙伴在评论区补充。</p>\n","site":{"data":{}},"cover":false,"abbrlink":"f3c852d2","excerpt":"","more":"<h1 id=\"Mysql事务的隔离级别\"><a href=\"#Mysql事务的隔离级别\" class=\"headerlink\" title=\"Mysql事务的隔离级别\"></a>Mysql事务的隔离级别</h1><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>我们之前介绍过Mysql的存储引擎，其中只有InnoDB支持事务，然而提到事务就一定会考虑到隔离级别，今天我们来整理一下Mysql事务的四大隔离级别相关知识，希望对大家有所帮助。</p>\n<h3 id=\"Mysql事务\"><a href=\"#Mysql事务\" class=\"headerlink\" title=\"Mysql事务\"></a>Mysql事务</h3><p>数据库事务指的是一组数据操作，事务内的操作要么就全部成功，要么就全部失败，什么都不做，其实不是没做，是可能只做了一部分，但只要有一步失败，就要回滚所有操作。</p>\n<p>在事务的使用中，我们会遇到一些相关问题，一般会有三种情况：<strong>脏读</strong>、<strong>不可重复读</strong>、<strong>幻读</strong>，这是事务并发可能会出现的情况。</p>\n<h4 id=\"脏读（Dirty-Read）\"><a href=\"#脏读（Dirty-Read）\" class=\"headerlink\" title=\"脏读（Dirty Read）\"></a>脏读（Dirty Read）</h4><blockquote>\n<p>脏读指的是：一个事务读到了另一个未提交事务修改过的数据，未提交意味着这些数据可能会回滚，也可能最终没有保存到数据库中，所以就导致了读到的数据不一定是真实的数据。这就是脏读。</p>\n</blockquote>\n<h4 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h4><blockquote>\n<p>可重复读指的是在同一个事务内，不同的时刻读到的同一批数据可能是不一样的，可能会受到其他事务的影响，比如当一个事务在大量读取数据时，有一其他事务对该数据进行了修改，这就会导致之后读取到的数据会与修改前不一致。这就是不可重复读，通常针对数据更新（update）操作。</p>\n</blockquote>\n<h4 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h4><blockquote>\n<p>幻读是针对数据<strong>插入（insert）</strong>操作来说的。假设事务A对某些数据做了修改，但是还没有提交事务，此时事务B插入了与事务A更改前的记录相同的数据，并且在事务A提交之前提交了，而这时，在事务A中查询，会发现好像刚刚的更改对某些数据不起作用，但这其实是事务B插入进来的，对于用户来说，就想中了幻术一样，这就是幻读。</p>\n</blockquote>\n<p>这三种是事务的实现中会发生的三种异常，使用Mysql定义的隔离级别可以避免它，我们之前讲过，Mysql的事务实现逻辑是位于引擎层的，但不是所有存储引擎都支持事务，下面我们所讲述的隔离级别都是以InnoDB存储引擎来描述。</p>\n<h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>隔离性（isolation）指的是不同事务先后提交并执行后，最终呈现出来的效果是串行的，也就是说，对于事务来说，它在执行过程中，感知到的数据变化应该只有自己操作引起的，不存在其他事务引发的数据变化。</p>\n<p><strong>隔离性解决的是并发事务出现的问题</strong>。</p>\n<h3 id=\"SQL的隔离级别\"><a href=\"#SQL的隔离级别\" class=\"headerlink\" title=\"SQL的隔离级别\"></a>SQL的隔离级别</h3><p>隔离性最简单的实现方式就是各个事务都串行执行了，如果前面的事务还没有执行完毕，后面的事务就都等待。但是这样的实现方式很明显并发效率不高，并不适合在实际环境中使用。</p>\n<p>为了解决上述问题，实现不同程度的并发控制，SQL的标准制定者提出了不同的隔离级别：未提交读（read uncommitted）、提交读（read committed）、可重复读（repeatable read）、序列化读（serializable）。其中最高级隔离级别就是序列化读，而在其他隔离级别中，由于事务是并发执行的，所以或多或少允许出现一些问题。见以下的矩阵表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">隔离级别（+:允许出现，-：不允许出现）</th>\n<th align=\"center\">脏读</th>\n<th align=\"center\">不可重复读</th>\n<th align=\"center\">幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">读未提交（RU）</td>\n<td align=\"center\">+</td>\n<td align=\"center\">+</td>\n<td align=\"center\">+</td>\n</tr>\n<tr>\n<td align=\"left\">读已提交</td>\n<td align=\"center\">-</td>\n<td align=\"center\">+</td>\n<td align=\"center\">+</td>\n</tr>\n<tr>\n<td align=\"left\">可重复度</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">+</td>\n</tr>\n<tr>\n<td align=\"left\">序列化</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n</tbody></table>\n<p><strong>注意，MySQL的InnoDB引擎在提交读级别通过MVCC解决了不可重复读的问题，在可重复读级别通过间隙锁解决了幻读问题，具体见下面的分析</strong>。</p>\n<h4 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h4><p><strong>标准SQL事务隔离级别实现原理</strong></p>\n<p>我们上面遇到的问题其实就是并发事务下的控制问题，解决并发事务的最常见方式就是悲观并发控制了（也就是数据库中的锁）。标准SQL事务隔离级别的实现是依赖锁的，我们来看下具体是怎么实现的：</p>\n<table>\n<thead>\n<tr>\n<th>事务隔离级别</th>\n<th>实现方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>读未提交（RU）</td>\n<td>事务对当前被读取的数据不加锁； 事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加<strong>行级共享锁</strong>，直到事务结束才释放。</td>\n</tr>\n<tr>\n<td>读已提交（RC）</td>\n<td>事务对当前被读取的数据加<strong>行级共享锁（当读到时才加锁）</strong>，一旦读完该行，立即释放该行级共享锁； 事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加<strong>行级排他锁</strong>，直到事务结束才释放。</td>\n</tr>\n<tr>\n<td>可重复读（RR）</td>\n<td>事务在读取某数据的瞬间（就是开始读取的瞬间），必须先对其加<strong>行级共享锁</strong>，直到事务结束才释放； 事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加<strong>行级排他锁</strong>，直到事务结束才释放。</td>\n</tr>\n<tr>\n<td>序列化（S）</td>\n<td>事务在读取数据时，必须先对其加<strong>表级共享锁</strong> ，直到事务结束才释放； 事务在更新数据时，必须先对其加<strong>表级排他锁</strong> ，直到事务结束才释放。</td>\n</tr>\n</tbody></table>\n<p>可以看到，在只使用锁来实现隔离级别的控制的时候，需要频繁的加锁解锁，而且很容易发生读写的冲突（例如在RC级别下，事务A更新了数据行1，事务B则在事务A提交前读取数据行1都要等待事务A提交并释放锁）。</p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>以上就是我对Mysql的隔离级别的一些看法和总结，欢迎小伙伴在评论区补充。</p>\n"},{"title":"mysql的存储引擎","abbrlink":"67748aab","date":"2023-09-24T02:26:09.000Z","_content":"\n# Mysql的存储引擎\n\n### 引言\n\nMysql有九种存储引擎，不同的存储引擎，使用与不同的场景，我们平时常用的，可能就是InnoDB，从Mysql5.5开始，就成为了Mysql的默认存储引擎。使用**show engines**命令可以查询Mysql的这几种存储引擎，从表头能看出开，都是yes的就是InnoDB存储引擎。\n\n![](Mysql的存储引擎/show engines.jpg)\n\n### Mysql的存储引擎种类和区别\n\n我们在使用数据库时，通常使用的存储引擎有三种，分别是InnoDB、MyISAM、MRMORY，下面我们来具体了解一下这三种引擎。\n\n| 特性           | InnoDB | MyISAM | MEMORY |\n| -------------- | ------ | ------ | ------ |\n| 事务安全       | 支持   | 不支持 | 不支持 |\n| 对外间的支持   | 支持   | 不支持 | 不支持 |\n| 存储限制       | 64TB   | 有     | 有     |\n| 空间使用       | 高     | 低     | 低     |\n| 内存使用       | 高     | 低     | 高     |\n| 插入数据的速度 | 低     | 高     | 高     |\n\n### 1.InnoDB\n\nInnoDB是一个健壮的事务型存储引擎，这种存储引擎已经被很多互联网公司使用，为用户操作非常大的数据存储提供了一个强大的解决方案。\n\nInnoDB还引入了行级锁定和外键约束，在以下场合下，使用InnoDB是最理想的选择：\n\n1. 更新密集的表，InnoDB存储引擎特别适合处理多并发的更新请求。\n\n2. 事务。InnoDB存储引擎是支持事务的标准Mysql存储引擎\n\n3. 自然灾难恢复。与其他存储引擎不同，InnoDB表能够自动从灾难中恢复。\n\n4. 外键约束。Mysql支持外键的存储引擎只有InnoDB。\n\n5. 支持自然增加列AUTO_INCREMENT属性\n\n6. 从Mysql5.7开始InnoDB存储引擎成为默认的存储引擎\n\n一般来说，如果需要事务支持，并且有较高的并发读取频率，InnoDB是很好的选择。\n\n### 2.MyISAM\n\nMyISAM表是独立于操作系统的，这说明可以轻松地将其从Windows服务器移植到Linux服务器。\n\n每当我们建立一个MyISAM引擎的表时，就会在本地磁盘上建立三个文件，文件名就是表名。\n\n例如，我建立了一个MyISAM引擎的tb_Demo表，那么就会生成以下三个文件：\n\n* tb_demo.frm，存储表定义。\n* tb_demo.MYD，存储数据。\n* tb_demo.MYI，存储索引。\n\nMyISAM表无法处理事务，这就意味着有事务处理需求的表，不能使用MyISAM存储引擎。MyISAM存储引擎特别适合在以下几种情况下使用：\n\n1. 选择密集型的表。 MyISAM存储引擎在筛选大量数据时非常迅速，这是它最突出的优点。\n2. 插入密集型的表。 MyISAM的并发插入特性允许同时选择和插入数据。\n\n由此看来，MyISAM存储引擎很适合·管理服务器日志数据\n\n### 3.MEMORY\n\n使用MySQL Memory存储引擎的出发点是速度，为得到最快的响应时间，采用的逻辑存储介质是系统内存。虽然在内存中存储表数据确实会提供很高的性能，但当mysqld守护进程崩溃时，所有的Memory数据都会丢失。当然，获得速度的同时也带来了一些缺陷。\n\n它要求存储在Memory数据表里的数据使用的是长度不变的格式，这意味着不能使用BLOB和TEXT这样的长度可变的数据类型。VARCHAR是一种长度可变的类型，但因为它在MySQL内部当做长度固定不变的CHAR类型，所以可以使用。\n\n一般在以下几种情况下使用Memory存储引擎：\n\n1. 目标数据较小，而且被非常频繁地访问。 在内存中存放数据，所以会造成内存的使用，可以通过参数max_heap_table_size控制Memory表的大小，设置此参数，就可以限制Memory表的最大大小。\n2. 如果数据是临时的，而且要求必须立即可用，那么就可以存放在内存表中。\n3. 存储在Memory表中的数据如果突然丢失，不会对应用服务产生实质的负面影响。\n4. Memory同时支持散列索引和B树索引。\n\nB树索引优于散列索引的是，可以使用部分查询和通配查询，也可以使用<、>和>=等操作符方便数据挖掘。\n\n散列索引进行“相等比较”非常快，但是对“范围比较”的速度就慢多了，因此散列索引值适合使用在=和<>的操作符中，不适合在<或>操作符中，也同样不适合用在order by子句中。\n\n### 总结\n\nMysql的存储引擎共有9种，上述的三种储存引擎是常用的三种，这三种中又以InnoDB使用最多，但是并不是全部都适用，选择存储引擎要根据具体业务来决定。以上就是我对Mysql存储引擎总结的一些知识，有很多不足的地方，欢迎小伙伴在评论区补充。\n","source":"_posts/Mysql的存储引擎.md","raw":"---\ntitle: mysql的存储引擎\ncategories:\n  - 中间件\ntags:\n  - Mysql\nabbrlink: 67748aab\ndate: 2023-09-24 10:26:09\n---\n\n# Mysql的存储引擎\n\n### 引言\n\nMysql有九种存储引擎，不同的存储引擎，使用与不同的场景，我们平时常用的，可能就是InnoDB，从Mysql5.5开始，就成为了Mysql的默认存储引擎。使用**show engines**命令可以查询Mysql的这几种存储引擎，从表头能看出开，都是yes的就是InnoDB存储引擎。\n\n![](Mysql的存储引擎/show engines.jpg)\n\n### Mysql的存储引擎种类和区别\n\n我们在使用数据库时，通常使用的存储引擎有三种，分别是InnoDB、MyISAM、MRMORY，下面我们来具体了解一下这三种引擎。\n\n| 特性           | InnoDB | MyISAM | MEMORY |\n| -------------- | ------ | ------ | ------ |\n| 事务安全       | 支持   | 不支持 | 不支持 |\n| 对外间的支持   | 支持   | 不支持 | 不支持 |\n| 存储限制       | 64TB   | 有     | 有     |\n| 空间使用       | 高     | 低     | 低     |\n| 内存使用       | 高     | 低     | 高     |\n| 插入数据的速度 | 低     | 高     | 高     |\n\n### 1.InnoDB\n\nInnoDB是一个健壮的事务型存储引擎，这种存储引擎已经被很多互联网公司使用，为用户操作非常大的数据存储提供了一个强大的解决方案。\n\nInnoDB还引入了行级锁定和外键约束，在以下场合下，使用InnoDB是最理想的选择：\n\n1. 更新密集的表，InnoDB存储引擎特别适合处理多并发的更新请求。\n\n2. 事务。InnoDB存储引擎是支持事务的标准Mysql存储引擎\n\n3. 自然灾难恢复。与其他存储引擎不同，InnoDB表能够自动从灾难中恢复。\n\n4. 外键约束。Mysql支持外键的存储引擎只有InnoDB。\n\n5. 支持自然增加列AUTO_INCREMENT属性\n\n6. 从Mysql5.7开始InnoDB存储引擎成为默认的存储引擎\n\n一般来说，如果需要事务支持，并且有较高的并发读取频率，InnoDB是很好的选择。\n\n### 2.MyISAM\n\nMyISAM表是独立于操作系统的，这说明可以轻松地将其从Windows服务器移植到Linux服务器。\n\n每当我们建立一个MyISAM引擎的表时，就会在本地磁盘上建立三个文件，文件名就是表名。\n\n例如，我建立了一个MyISAM引擎的tb_Demo表，那么就会生成以下三个文件：\n\n* tb_demo.frm，存储表定义。\n* tb_demo.MYD，存储数据。\n* tb_demo.MYI，存储索引。\n\nMyISAM表无法处理事务，这就意味着有事务处理需求的表，不能使用MyISAM存储引擎。MyISAM存储引擎特别适合在以下几种情况下使用：\n\n1. 选择密集型的表。 MyISAM存储引擎在筛选大量数据时非常迅速，这是它最突出的优点。\n2. 插入密集型的表。 MyISAM的并发插入特性允许同时选择和插入数据。\n\n由此看来，MyISAM存储引擎很适合·管理服务器日志数据\n\n### 3.MEMORY\n\n使用MySQL Memory存储引擎的出发点是速度，为得到最快的响应时间，采用的逻辑存储介质是系统内存。虽然在内存中存储表数据确实会提供很高的性能，但当mysqld守护进程崩溃时，所有的Memory数据都会丢失。当然，获得速度的同时也带来了一些缺陷。\n\n它要求存储在Memory数据表里的数据使用的是长度不变的格式，这意味着不能使用BLOB和TEXT这样的长度可变的数据类型。VARCHAR是一种长度可变的类型，但因为它在MySQL内部当做长度固定不变的CHAR类型，所以可以使用。\n\n一般在以下几种情况下使用Memory存储引擎：\n\n1. 目标数据较小，而且被非常频繁地访问。 在内存中存放数据，所以会造成内存的使用，可以通过参数max_heap_table_size控制Memory表的大小，设置此参数，就可以限制Memory表的最大大小。\n2. 如果数据是临时的，而且要求必须立即可用，那么就可以存放在内存表中。\n3. 存储在Memory表中的数据如果突然丢失，不会对应用服务产生实质的负面影响。\n4. Memory同时支持散列索引和B树索引。\n\nB树索引优于散列索引的是，可以使用部分查询和通配查询，也可以使用<、>和>=等操作符方便数据挖掘。\n\n散列索引进行“相等比较”非常快，但是对“范围比较”的速度就慢多了，因此散列索引值适合使用在=和<>的操作符中，不适合在<或>操作符中，也同样不适合用在order by子句中。\n\n### 总结\n\nMysql的存储引擎共有9种，上述的三种储存引擎是常用的三种，这三种中又以InnoDB使用最多，但是并不是全部都适用，选择存储引擎要根据具体业务来决定。以上就是我对Mysql存储引擎总结的一些知识，有很多不足的地方，欢迎小伙伴在评论区补充。\n","slug":"Mysql的存储引擎","published":1,"updated":"2023-09-30T01:03:17.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln5lvfbx0002fwugheaj3rcn","content":"<h1 id=\"Mysql的存储引擎\"><a href=\"#Mysql的存储引擎\" class=\"headerlink\" title=\"Mysql的存储引擎\"></a>Mysql的存储引擎</h1><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>Mysql有九种存储引擎，不同的存储引擎，使用与不同的场景，我们平时常用的，可能就是InnoDB，从Mysql5.5开始，就成为了Mysql的默认存储引擎。使用<strong>show engines</strong>命令可以查询Mysql的这几种存储引擎，从表头能看出开，都是yes的就是InnoDB存储引擎。</p>\n<p>![](Mysql的存储引擎&#x2F;show engines.jpg)</p>\n<h3 id=\"Mysql的存储引擎种类和区别\"><a href=\"#Mysql的存储引擎种类和区别\" class=\"headerlink\" title=\"Mysql的存储引擎种类和区别\"></a>Mysql的存储引擎种类和区别</h3><p>我们在使用数据库时，通常使用的存储引擎有三种，分别是InnoDB、MyISAM、MRMORY，下面我们来具体了解一下这三种引擎。</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n<th>MEMORY</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>事务安全</td>\n<td>支持</td>\n<td>不支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>对外间的支持</td>\n<td>支持</td>\n<td>不支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>存储限制</td>\n<td>64TB</td>\n<td>有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>空间使用</td>\n<td>高</td>\n<td>低</td>\n<td>低</td>\n</tr>\n<tr>\n<td>内存使用</td>\n<td>高</td>\n<td>低</td>\n<td>高</td>\n</tr>\n<tr>\n<td>插入数据的速度</td>\n<td>低</td>\n<td>高</td>\n<td>高</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-InnoDB\"><a href=\"#1-InnoDB\" class=\"headerlink\" title=\"1.InnoDB\"></a>1.InnoDB</h3><p>InnoDB是一个健壮的事务型存储引擎，这种存储引擎已经被很多互联网公司使用，为用户操作非常大的数据存储提供了一个强大的解决方案。</p>\n<p>InnoDB还引入了行级锁定和外键约束，在以下场合下，使用InnoDB是最理想的选择：</p>\n<ol>\n<li><p>更新密集的表，InnoDB存储引擎特别适合处理多并发的更新请求。</p>\n</li>\n<li><p>事务。InnoDB存储引擎是支持事务的标准Mysql存储引擎</p>\n</li>\n<li><p>自然灾难恢复。与其他存储引擎不同，InnoDB表能够自动从灾难中恢复。</p>\n</li>\n<li><p>外键约束。Mysql支持外键的存储引擎只有InnoDB。</p>\n</li>\n<li><p>支持自然增加列AUTO_INCREMENT属性</p>\n</li>\n<li><p>从Mysql5.7开始InnoDB存储引擎成为默认的存储引擎</p>\n</li>\n</ol>\n<p>一般来说，如果需要事务支持，并且有较高的并发读取频率，InnoDB是很好的选择。</p>\n<h3 id=\"2-MyISAM\"><a href=\"#2-MyISAM\" class=\"headerlink\" title=\"2.MyISAM\"></a>2.MyISAM</h3><p>MyISAM表是独立于操作系统的，这说明可以轻松地将其从Windows服务器移植到Linux服务器。</p>\n<p>每当我们建立一个MyISAM引擎的表时，就会在本地磁盘上建立三个文件，文件名就是表名。</p>\n<p>例如，我建立了一个MyISAM引擎的tb_Demo表，那么就会生成以下三个文件：</p>\n<ul>\n<li>tb_demo.frm，存储表定义。</li>\n<li>tb_demo.MYD，存储数据。</li>\n<li>tb_demo.MYI，存储索引。</li>\n</ul>\n<p>MyISAM表无法处理事务，这就意味着有事务处理需求的表，不能使用MyISAM存储引擎。MyISAM存储引擎特别适合在以下几种情况下使用：</p>\n<ol>\n<li>选择密集型的表。 MyISAM存储引擎在筛选大量数据时非常迅速，这是它最突出的优点。</li>\n<li>插入密集型的表。 MyISAM的并发插入特性允许同时选择和插入数据。</li>\n</ol>\n<p>由此看来，MyISAM存储引擎很适合·管理服务器日志数据</p>\n<h3 id=\"3-MEMORY\"><a href=\"#3-MEMORY\" class=\"headerlink\" title=\"3.MEMORY\"></a>3.MEMORY</h3><p>使用MySQL Memory存储引擎的出发点是速度，为得到最快的响应时间，采用的逻辑存储介质是系统内存。虽然在内存中存储表数据确实会提供很高的性能，但当mysqld守护进程崩溃时，所有的Memory数据都会丢失。当然，获得速度的同时也带来了一些缺陷。</p>\n<p>它要求存储在Memory数据表里的数据使用的是长度不变的格式，这意味着不能使用BLOB和TEXT这样的长度可变的数据类型。VARCHAR是一种长度可变的类型，但因为它在MySQL内部当做长度固定不变的CHAR类型，所以可以使用。</p>\n<p>一般在以下几种情况下使用Memory存储引擎：</p>\n<ol>\n<li>目标数据较小，而且被非常频繁地访问。 在内存中存放数据，所以会造成内存的使用，可以通过参数max_heap_table_size控制Memory表的大小，设置此参数，就可以限制Memory表的最大大小。</li>\n<li>如果数据是临时的，而且要求必须立即可用，那么就可以存放在内存表中。</li>\n<li>存储在Memory表中的数据如果突然丢失，不会对应用服务产生实质的负面影响。</li>\n<li>Memory同时支持散列索引和B树索引。</li>\n</ol>\n<p>B树索引优于散列索引的是，可以使用部分查询和通配查询，也可以使用&lt;、&gt;和&gt;&#x3D;等操作符方便数据挖掘。</p>\n<p>散列索引进行“相等比较”非常快，但是对“范围比较”的速度就慢多了，因此散列索引值适合使用在&#x3D;和&lt;&gt;的操作符中，不适合在&lt;或&gt;操作符中，也同样不适合用在order by子句中。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Mysql的存储引擎共有9种，上述的三种储存引擎是常用的三种，这三种中又以InnoDB使用最多，但是并不是全部都适用，选择存储引擎要根据具体业务来决定。以上就是我对Mysql存储引擎总结的一些知识，有很多不足的地方，欢迎小伙伴在评论区补充。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"Mysql的存储引擎\"><a href=\"#Mysql的存储引擎\" class=\"headerlink\" title=\"Mysql的存储引擎\"></a>Mysql的存储引擎</h1><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>Mysql有九种存储引擎，不同的存储引擎，使用与不同的场景，我们平时常用的，可能就是InnoDB，从Mysql5.5开始，就成为了Mysql的默认存储引擎。使用<strong>show engines</strong>命令可以查询Mysql的这几种存储引擎，从表头能看出开，都是yes的就是InnoDB存储引擎。</p>\n<p>![](Mysql的存储引擎&#x2F;show engines.jpg)</p>\n<h3 id=\"Mysql的存储引擎种类和区别\"><a href=\"#Mysql的存储引擎种类和区别\" class=\"headerlink\" title=\"Mysql的存储引擎种类和区别\"></a>Mysql的存储引擎种类和区别</h3><p>我们在使用数据库时，通常使用的存储引擎有三种，分别是InnoDB、MyISAM、MRMORY，下面我们来具体了解一下这三种引擎。</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n<th>MEMORY</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>事务安全</td>\n<td>支持</td>\n<td>不支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>对外间的支持</td>\n<td>支持</td>\n<td>不支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>存储限制</td>\n<td>64TB</td>\n<td>有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>空间使用</td>\n<td>高</td>\n<td>低</td>\n<td>低</td>\n</tr>\n<tr>\n<td>内存使用</td>\n<td>高</td>\n<td>低</td>\n<td>高</td>\n</tr>\n<tr>\n<td>插入数据的速度</td>\n<td>低</td>\n<td>高</td>\n<td>高</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-InnoDB\"><a href=\"#1-InnoDB\" class=\"headerlink\" title=\"1.InnoDB\"></a>1.InnoDB</h3><p>InnoDB是一个健壮的事务型存储引擎，这种存储引擎已经被很多互联网公司使用，为用户操作非常大的数据存储提供了一个强大的解决方案。</p>\n<p>InnoDB还引入了行级锁定和外键约束，在以下场合下，使用InnoDB是最理想的选择：</p>\n<ol>\n<li><p>更新密集的表，InnoDB存储引擎特别适合处理多并发的更新请求。</p>\n</li>\n<li><p>事务。InnoDB存储引擎是支持事务的标准Mysql存储引擎</p>\n</li>\n<li><p>自然灾难恢复。与其他存储引擎不同，InnoDB表能够自动从灾难中恢复。</p>\n</li>\n<li><p>外键约束。Mysql支持外键的存储引擎只有InnoDB。</p>\n</li>\n<li><p>支持自然增加列AUTO_INCREMENT属性</p>\n</li>\n<li><p>从Mysql5.7开始InnoDB存储引擎成为默认的存储引擎</p>\n</li>\n</ol>\n<p>一般来说，如果需要事务支持，并且有较高的并发读取频率，InnoDB是很好的选择。</p>\n<h3 id=\"2-MyISAM\"><a href=\"#2-MyISAM\" class=\"headerlink\" title=\"2.MyISAM\"></a>2.MyISAM</h3><p>MyISAM表是独立于操作系统的，这说明可以轻松地将其从Windows服务器移植到Linux服务器。</p>\n<p>每当我们建立一个MyISAM引擎的表时，就会在本地磁盘上建立三个文件，文件名就是表名。</p>\n<p>例如，我建立了一个MyISAM引擎的tb_Demo表，那么就会生成以下三个文件：</p>\n<ul>\n<li>tb_demo.frm，存储表定义。</li>\n<li>tb_demo.MYD，存储数据。</li>\n<li>tb_demo.MYI，存储索引。</li>\n</ul>\n<p>MyISAM表无法处理事务，这就意味着有事务处理需求的表，不能使用MyISAM存储引擎。MyISAM存储引擎特别适合在以下几种情况下使用：</p>\n<ol>\n<li>选择密集型的表。 MyISAM存储引擎在筛选大量数据时非常迅速，这是它最突出的优点。</li>\n<li>插入密集型的表。 MyISAM的并发插入特性允许同时选择和插入数据。</li>\n</ol>\n<p>由此看来，MyISAM存储引擎很适合·管理服务器日志数据</p>\n<h3 id=\"3-MEMORY\"><a href=\"#3-MEMORY\" class=\"headerlink\" title=\"3.MEMORY\"></a>3.MEMORY</h3><p>使用MySQL Memory存储引擎的出发点是速度，为得到最快的响应时间，采用的逻辑存储介质是系统内存。虽然在内存中存储表数据确实会提供很高的性能，但当mysqld守护进程崩溃时，所有的Memory数据都会丢失。当然，获得速度的同时也带来了一些缺陷。</p>\n<p>它要求存储在Memory数据表里的数据使用的是长度不变的格式，这意味着不能使用BLOB和TEXT这样的长度可变的数据类型。VARCHAR是一种长度可变的类型，但因为它在MySQL内部当做长度固定不变的CHAR类型，所以可以使用。</p>\n<p>一般在以下几种情况下使用Memory存储引擎：</p>\n<ol>\n<li>目标数据较小，而且被非常频繁地访问。 在内存中存放数据，所以会造成内存的使用，可以通过参数max_heap_table_size控制Memory表的大小，设置此参数，就可以限制Memory表的最大大小。</li>\n<li>如果数据是临时的，而且要求必须立即可用，那么就可以存放在内存表中。</li>\n<li>存储在Memory表中的数据如果突然丢失，不会对应用服务产生实质的负面影响。</li>\n<li>Memory同时支持散列索引和B树索引。</li>\n</ol>\n<p>B树索引优于散列索引的是，可以使用部分查询和通配查询，也可以使用&lt;、&gt;和&gt;&#x3D;等操作符方便数据挖掘。</p>\n<p>散列索引进行“相等比较”非常快，但是对“范围比较”的速度就慢多了，因此散列索引值适合使用在&#x3D;和&lt;&gt;的操作符中，不适合在&lt;或&gt;操作符中，也同样不适合用在order by子句中。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Mysql的存储引擎共有9种，上述的三种储存引擎是常用的三种，这三种中又以InnoDB使用最多，但是并不是全部都适用，选择存储引擎要根据具体业务来决定。以上就是我对Mysql存储引擎总结的一些知识，有很多不足的地方，欢迎小伙伴在评论区补充。</p>\n"},{"title":"Redis的持久化机制","abbrlink":"e5adb42e","date":"2023-09-12T01:15:51.000Z","_content":"\n# Redis的持久化机制\n\n### 引言\n\n我们都知道，Redis 的数据存储在内存中, 一旦服务器宕机，内存中的数据将全部丢失。因此，对 Redis 来说，实现数据的持久化，避免从后端数据库中进行恢复，是至关重要的。本篇我们详细讲解下 Redis 的三种持久化机制，分别是 AOF（Append Only File） 日志和 RDB 快照 以及 混合持久化。\n\n### AOF机制\n\nAOF 日志是写后日志，也就是 Redis 先执行命令，然后将数据写入内存，最后才记录日志，重启时通过执行 AOF 文件中的 Redis 命令来恢复数据。如下图所示：\n\n![](https://developer.qcloudimg.com/http-save/yehe-10418638/693b4cb76c16876336e4c5a3a06fed27.png)\n\n类似MySql bin-log 的原理，AOF 能够解决数据持久化实时性问题，是目前 Redis 持久化机制中主流的方案。\n\n### AOF持久化流程\n\nAOF 持久化方案进行备份时，客户端所有请求的写命令都会被追加到 AOF 缓冲区中，缓冲区中的数据会根据 Redis 配置文件中配置的同步策略来同步到磁盘上的 AOF 文件中，追加保存每次写的操作到文件末尾。当 AOF 的文件达到重写策略配置的阈值时，Redis 会对 AOF 日志文件进行重写，给 AOF 日志文件瘦身。Redis 服务重启的时候，通过加载 AOF 日志文件来恢复数据。如下图所示：\n\n![](https://developer.qcloudimg.com/http-save/yehe-10418638/bc15aa10e9c9d41ef356faa07b60cb82.png)\n\n### Redis AOF 执行流程\n\nAOF 为了避免额外的检查开销，并不会检查命令的正确性，如果先记录日志再执行命令，就有可能记录错误的命令，再通过 AOF 日志恢复数据的时候，就有可能出错，而且在执行完命令后记录日志也不会阻塞当前的写操作。但是 AOF 是存在一定的风险的，首先是如果刚执行一个命令，但是 AOF 文件中还没来得及保存就宕机了，那么这个命令和数据就会有丢失的风险，另外 AOF 虽然可以避免对当前命令的阻塞（因为是先写入再记录日志），但有可能会对下一次操作带来阻塞风险（可能存在写入磁盘较慢的情况）。这两种情况都在于 AOF 什么时候写入磁盘，针对这个问题 AOF 机制提供了三种同步策略（appendfsync 参数）。\n\n### AOF 写入磁盘的同步策略\n\n| 参数     | 同步策略                                                     |\n| -------- | ------------------------------------------------------------ |\n| Always   | 同步写入磁盘，只要有写入就会调用fsync函数；                  |\n| Everysec | 每秒调用fsync函数一次，每个命令执行完，先把日志写入 AOF 文件的缓冲区，每隔一秒把缓冲区的内容写入磁盘 |\n| No       | 不调用fsync，让操作系统决定何时同步磁盘。每个命令执行完，先将日志写入 AOF 文件的缓冲区，由操作系统决定何时把缓冲区的内容写入磁盘 |\n\n### 三种同步策略的优缺点如下：\n\n* Always：可靠性较高，数据基本不丢失，但是对性能影响较大\n* Everysec：性能适中，及时宕机也只会丢失一秒的数据\n* No：性能好，但发生当即情况时，\n\n### AOF重写\n\n我们上面说过，AOF 属于日志追加的形式来存储 Redis 的写指令，虽然有一定的写回策略，但毕竟 AOF 是通过文件的形式记录所有的写命令，但如果指令越来越多的时候，AOF 文件就会越来越大，可能会超出文件大小的限制。如果发生宕机，需要把 AOF 所有的命令重新执行，以用于故障恢复，数据过大的话这个恢复过程越漫长，也会影响 Redis 的使用。因此 Redis 提供 **重写机制**来解决这个问题。\n\nAOF 重写的过程是通过主线程 fork 后台的 bgrewriteaof 子进程来实现的，可以避免阻塞主进导致性能下降，整个过程如下：\n\n* AOF 每次重写，fork 过程会把主线程的内存拷贝一份 bgrewriteaof 子进程，里面包含了数据库的数据，拷贝的是父进程的页表，可以在不影响主进程的情况下逐一把拷贝的数据记入重写日志；\n\n* 因为主线程没有阻塞，仍然可以处理新来的操作，如果这时候存在写操作，会先把操作先放入缓冲区，对于正在使用的日志，如果宕机了这个日志也是齐全的，可以用于恢复；对于正在更新的日志，也不会丢失新的操作，等到数据拷贝完成，就可以将缓冲区的数据写入到新的文件中，保证数据库的最新状态。\n\n### RDB快照\n\nRDB是一种快照存储持久化方式，具体就是将Redis某一时刻的内存数据保存到硬盘的文件当中，默认保存的文件名为dump.rdb，而在Redis服务器启动时，会重新加载dump.rdb文件的数据到内存当中恢复数据。\n\n为了 RDB 数据恢复的可靠性，在进行快照的时候是全量快照，会将内存中所有的数据都记录到磁盘中，这就有可能会阻塞主线程的执行。Redis 提供了两个命令来生成 RDB 文件，分别是 **save** 和 **bgsave** ：\n\n* **save**：执行 save 指令，阻塞 Redis 的其他操作，会导致 Redis 无法响应客户端请求，不建议使用。\n* **bgsave**：执行 bgsave 指令，Redis 后台创建子进程，异步进行快照的保存操作，此时 Redis 仍然能响应客户端的请求。\n\n### 自动间隔保存\n\nRedis 可以设置间隔性保存，让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时，自动保存一次数据集。比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 10 个键被改动”这一条件时，自动保存一次数据集：save 60 10\n\nRedis 的默认配置如下，三个设置满足其一就会触发自动保存：\n\n> save  60  10000\n>\n> save  900  10\n>\n> save  300  1\n\n### RDB模式优点\n\n* 相比AOF在恢复数据的时候需要一条条的执行操作命令，通过RDB文件恢复数据的效率更高；\n* 同样规模的内存数据，RDB文件数据更加紧凑，磁盘空间占用更小；\n* 适合全量备份内存数据场景；\n* 可以根据不同的时间间隔保存RDB文件，在恢复数据的时候可以更加灵活地选择对应版本数据进行恢复\n\n ### RDB模式缺点\n\n* 由于RDB数据保存存在一定的时间间隔，因此存在丢失缓存数据的风险；\n* fork子进程进行RDB文件生成，由于是一次性生成一个内存快照文件，对于服务器磁盘IO以及Redis本身来说都属于重操作，可能会对服务器的磁盘IO造成压力。\n\n### 混合使用AOF日志和RDB快照\n\nRedis4.0 后大部分的使用场景都不会单独使用 RDB 或者 AOF 来做持久化机制，而是兼顾二者的优势混合使用。其原因是 RDB 虽然快，但是会丢失比较多的数据，不能保证数据完整性；AOF 虽然能尽可能保证数据完整性，但是性能确实是一个诟病，比如重放恢复数据。  \n\nRedis从4.0版本开始引入 RDB-AOF 混合持久化模式，这种模式是基于 AOF 持久化模式构建而来的，混合持久化通过 **aof-use-rdb-preamble yes** 开启。这样的好处是 RDB 快照不需要很频繁的执行，可以避免频繁 fork 对主线程的影响，而且 AOF 日志也只记录两次快照期间的操作，不用记录所有操作，也不会出现文件过大的情况，避免了重写开销。\n\n ### 总结\n\n本文主要分析了Redis AOF、RDB快照 以及混合持久化的内存数据持久化的机制原理，生产环境中推荐使用混合持久化，这种方式综合了RDB和AOF两种方式的优点。\n\n","source":"_posts/Redis的持久化机制.md","raw":"---\ntitle: Redis的持久化机制\ncategories:\n  - 中间件\ntags:\n  - redis\nabbrlink: e5adb42e\ndate: 2023-09-12 09:15:51\n---\n\n# Redis的持久化机制\n\n### 引言\n\n我们都知道，Redis 的数据存储在内存中, 一旦服务器宕机，内存中的数据将全部丢失。因此，对 Redis 来说，实现数据的持久化，避免从后端数据库中进行恢复，是至关重要的。本篇我们详细讲解下 Redis 的三种持久化机制，分别是 AOF（Append Only File） 日志和 RDB 快照 以及 混合持久化。\n\n### AOF机制\n\nAOF 日志是写后日志，也就是 Redis 先执行命令，然后将数据写入内存，最后才记录日志，重启时通过执行 AOF 文件中的 Redis 命令来恢复数据。如下图所示：\n\n![](https://developer.qcloudimg.com/http-save/yehe-10418638/693b4cb76c16876336e4c5a3a06fed27.png)\n\n类似MySql bin-log 的原理，AOF 能够解决数据持久化实时性问题，是目前 Redis 持久化机制中主流的方案。\n\n### AOF持久化流程\n\nAOF 持久化方案进行备份时，客户端所有请求的写命令都会被追加到 AOF 缓冲区中，缓冲区中的数据会根据 Redis 配置文件中配置的同步策略来同步到磁盘上的 AOF 文件中，追加保存每次写的操作到文件末尾。当 AOF 的文件达到重写策略配置的阈值时，Redis 会对 AOF 日志文件进行重写，给 AOF 日志文件瘦身。Redis 服务重启的时候，通过加载 AOF 日志文件来恢复数据。如下图所示：\n\n![](https://developer.qcloudimg.com/http-save/yehe-10418638/bc15aa10e9c9d41ef356faa07b60cb82.png)\n\n### Redis AOF 执行流程\n\nAOF 为了避免额外的检查开销，并不会检查命令的正确性，如果先记录日志再执行命令，就有可能记录错误的命令，再通过 AOF 日志恢复数据的时候，就有可能出错，而且在执行完命令后记录日志也不会阻塞当前的写操作。但是 AOF 是存在一定的风险的，首先是如果刚执行一个命令，但是 AOF 文件中还没来得及保存就宕机了，那么这个命令和数据就会有丢失的风险，另外 AOF 虽然可以避免对当前命令的阻塞（因为是先写入再记录日志），但有可能会对下一次操作带来阻塞风险（可能存在写入磁盘较慢的情况）。这两种情况都在于 AOF 什么时候写入磁盘，针对这个问题 AOF 机制提供了三种同步策略（appendfsync 参数）。\n\n### AOF 写入磁盘的同步策略\n\n| 参数     | 同步策略                                                     |\n| -------- | ------------------------------------------------------------ |\n| Always   | 同步写入磁盘，只要有写入就会调用fsync函数；                  |\n| Everysec | 每秒调用fsync函数一次，每个命令执行完，先把日志写入 AOF 文件的缓冲区，每隔一秒把缓冲区的内容写入磁盘 |\n| No       | 不调用fsync，让操作系统决定何时同步磁盘。每个命令执行完，先将日志写入 AOF 文件的缓冲区，由操作系统决定何时把缓冲区的内容写入磁盘 |\n\n### 三种同步策略的优缺点如下：\n\n* Always：可靠性较高，数据基本不丢失，但是对性能影响较大\n* Everysec：性能适中，及时宕机也只会丢失一秒的数据\n* No：性能好，但发生当即情况时，\n\n### AOF重写\n\n我们上面说过，AOF 属于日志追加的形式来存储 Redis 的写指令，虽然有一定的写回策略，但毕竟 AOF 是通过文件的形式记录所有的写命令，但如果指令越来越多的时候，AOF 文件就会越来越大，可能会超出文件大小的限制。如果发生宕机，需要把 AOF 所有的命令重新执行，以用于故障恢复，数据过大的话这个恢复过程越漫长，也会影响 Redis 的使用。因此 Redis 提供 **重写机制**来解决这个问题。\n\nAOF 重写的过程是通过主线程 fork 后台的 bgrewriteaof 子进程来实现的，可以避免阻塞主进导致性能下降，整个过程如下：\n\n* AOF 每次重写，fork 过程会把主线程的内存拷贝一份 bgrewriteaof 子进程，里面包含了数据库的数据，拷贝的是父进程的页表，可以在不影响主进程的情况下逐一把拷贝的数据记入重写日志；\n\n* 因为主线程没有阻塞，仍然可以处理新来的操作，如果这时候存在写操作，会先把操作先放入缓冲区，对于正在使用的日志，如果宕机了这个日志也是齐全的，可以用于恢复；对于正在更新的日志，也不会丢失新的操作，等到数据拷贝完成，就可以将缓冲区的数据写入到新的文件中，保证数据库的最新状态。\n\n### RDB快照\n\nRDB是一种快照存储持久化方式，具体就是将Redis某一时刻的内存数据保存到硬盘的文件当中，默认保存的文件名为dump.rdb，而在Redis服务器启动时，会重新加载dump.rdb文件的数据到内存当中恢复数据。\n\n为了 RDB 数据恢复的可靠性，在进行快照的时候是全量快照，会将内存中所有的数据都记录到磁盘中，这就有可能会阻塞主线程的执行。Redis 提供了两个命令来生成 RDB 文件，分别是 **save** 和 **bgsave** ：\n\n* **save**：执行 save 指令，阻塞 Redis 的其他操作，会导致 Redis 无法响应客户端请求，不建议使用。\n* **bgsave**：执行 bgsave 指令，Redis 后台创建子进程，异步进行快照的保存操作，此时 Redis 仍然能响应客户端的请求。\n\n### 自动间隔保存\n\nRedis 可以设置间隔性保存，让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时，自动保存一次数据集。比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 10 个键被改动”这一条件时，自动保存一次数据集：save 60 10\n\nRedis 的默认配置如下，三个设置满足其一就会触发自动保存：\n\n> save  60  10000\n>\n> save  900  10\n>\n> save  300  1\n\n### RDB模式优点\n\n* 相比AOF在恢复数据的时候需要一条条的执行操作命令，通过RDB文件恢复数据的效率更高；\n* 同样规模的内存数据，RDB文件数据更加紧凑，磁盘空间占用更小；\n* 适合全量备份内存数据场景；\n* 可以根据不同的时间间隔保存RDB文件，在恢复数据的时候可以更加灵活地选择对应版本数据进行恢复\n\n ### RDB模式缺点\n\n* 由于RDB数据保存存在一定的时间间隔，因此存在丢失缓存数据的风险；\n* fork子进程进行RDB文件生成，由于是一次性生成一个内存快照文件，对于服务器磁盘IO以及Redis本身来说都属于重操作，可能会对服务器的磁盘IO造成压力。\n\n### 混合使用AOF日志和RDB快照\n\nRedis4.0 后大部分的使用场景都不会单独使用 RDB 或者 AOF 来做持久化机制，而是兼顾二者的优势混合使用。其原因是 RDB 虽然快，但是会丢失比较多的数据，不能保证数据完整性；AOF 虽然能尽可能保证数据完整性，但是性能确实是一个诟病，比如重放恢复数据。  \n\nRedis从4.0版本开始引入 RDB-AOF 混合持久化模式，这种模式是基于 AOF 持久化模式构建而来的，混合持久化通过 **aof-use-rdb-preamble yes** 开启。这样的好处是 RDB 快照不需要很频繁的执行，可以避免频繁 fork 对主线程的影响，而且 AOF 日志也只记录两次快照期间的操作，不用记录所有操作，也不会出现文件过大的情况，避免了重写开销。\n\n ### 总结\n\n本文主要分析了Redis AOF、RDB快照 以及混合持久化的内存数据持久化的机制原理，生产环境中推荐使用混合持久化，这种方式综合了RDB和AOF两种方式的优点。\n\n","slug":"Redis的持久化机制","published":1,"updated":"2023-09-23T13:07:27.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln5lvfc10006fwugby0n0na7","content":"<h1 id=\"Redis的持久化机制\"><a href=\"#Redis的持久化机制\" class=\"headerlink\" title=\"Redis的持久化机制\"></a>Redis的持久化机制</h1><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>我们都知道，Redis 的数据存储在内存中, 一旦服务器宕机，内存中的数据将全部丢失。因此，对 Redis 来说，实现数据的持久化，避免从后端数据库中进行恢复，是至关重要的。本篇我们详细讲解下 Redis 的三种持久化机制，分别是 AOF（Append Only File） 日志和 RDB 快照 以及 混合持久化。</p>\n<h3 id=\"AOF机制\"><a href=\"#AOF机制\" class=\"headerlink\" title=\"AOF机制\"></a>AOF机制</h3><p>AOF 日志是写后日志，也就是 Redis 先执行命令，然后将数据写入内存，最后才记录日志，重启时通过执行 AOF 文件中的 Redis 命令来恢复数据。如下图所示：</p>\n<p><img src=\"https://developer.qcloudimg.com/http-save/yehe-10418638/693b4cb76c16876336e4c5a3a06fed27.png\"></p>\n<p>类似MySql bin-log 的原理，AOF 能够解决数据持久化实时性问题，是目前 Redis 持久化机制中主流的方案。</p>\n<h3 id=\"AOF持久化流程\"><a href=\"#AOF持久化流程\" class=\"headerlink\" title=\"AOF持久化流程\"></a>AOF持久化流程</h3><p>AOF 持久化方案进行备份时，客户端所有请求的写命令都会被追加到 AOF 缓冲区中，缓冲区中的数据会根据 Redis 配置文件中配置的同步策略来同步到磁盘上的 AOF 文件中，追加保存每次写的操作到文件末尾。当 AOF 的文件达到重写策略配置的阈值时，Redis 会对 AOF 日志文件进行重写，给 AOF 日志文件瘦身。Redis 服务重启的时候，通过加载 AOF 日志文件来恢复数据。如下图所示：</p>\n<p><img src=\"https://developer.qcloudimg.com/http-save/yehe-10418638/bc15aa10e9c9d41ef356faa07b60cb82.png\"></p>\n<h3 id=\"Redis-AOF-执行流程\"><a href=\"#Redis-AOF-执行流程\" class=\"headerlink\" title=\"Redis AOF 执行流程\"></a>Redis AOF 执行流程</h3><p>AOF 为了避免额外的检查开销，并不会检查命令的正确性，如果先记录日志再执行命令，就有可能记录错误的命令，再通过 AOF 日志恢复数据的时候，就有可能出错，而且在执行完命令后记录日志也不会阻塞当前的写操作。但是 AOF 是存在一定的风险的，首先是如果刚执行一个命令，但是 AOF 文件中还没来得及保存就宕机了，那么这个命令和数据就会有丢失的风险，另外 AOF 虽然可以避免对当前命令的阻塞（因为是先写入再记录日志），但有可能会对下一次操作带来阻塞风险（可能存在写入磁盘较慢的情况）。这两种情况都在于 AOF 什么时候写入磁盘，针对这个问题 AOF 机制提供了三种同步策略（appendfsync 参数）。</p>\n<h3 id=\"AOF-写入磁盘的同步策略\"><a href=\"#AOF-写入磁盘的同步策略\" class=\"headerlink\" title=\"AOF 写入磁盘的同步策略\"></a>AOF 写入磁盘的同步策略</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>同步策略</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Always</td>\n<td>同步写入磁盘，只要有写入就会调用fsync函数；</td>\n</tr>\n<tr>\n<td>Everysec</td>\n<td>每秒调用fsync函数一次，每个命令执行完，先把日志写入 AOF 文件的缓冲区，每隔一秒把缓冲区的内容写入磁盘</td>\n</tr>\n<tr>\n<td>No</td>\n<td>不调用fsync，让操作系统决定何时同步磁盘。每个命令执行完，先将日志写入 AOF 文件的缓冲区，由操作系统决定何时把缓冲区的内容写入磁盘</td>\n</tr>\n</tbody></table>\n<h3 id=\"三种同步策略的优缺点如下：\"><a href=\"#三种同步策略的优缺点如下：\" class=\"headerlink\" title=\"三种同步策略的优缺点如下：\"></a>三种同步策略的优缺点如下：</h3><ul>\n<li>Always：可靠性较高，数据基本不丢失，但是对性能影响较大</li>\n<li>Everysec：性能适中，及时宕机也只会丢失一秒的数据</li>\n<li>No：性能好，但发生当即情况时，</li>\n</ul>\n<h3 id=\"AOF重写\"><a href=\"#AOF重写\" class=\"headerlink\" title=\"AOF重写\"></a>AOF重写</h3><p>我们上面说过，AOF 属于日志追加的形式来存储 Redis 的写指令，虽然有一定的写回策略，但毕竟 AOF 是通过文件的形式记录所有的写命令，但如果指令越来越多的时候，AOF 文件就会越来越大，可能会超出文件大小的限制。如果发生宕机，需要把 AOF 所有的命令重新执行，以用于故障恢复，数据过大的话这个恢复过程越漫长，也会影响 Redis 的使用。因此 Redis 提供 <strong>重写机制</strong>来解决这个问题。</p>\n<p>AOF 重写的过程是通过主线程 fork 后台的 bgrewriteaof 子进程来实现的，可以避免阻塞主进导致性能下降，整个过程如下：</p>\n<ul>\n<li><p>AOF 每次重写，fork 过程会把主线程的内存拷贝一份 bgrewriteaof 子进程，里面包含了数据库的数据，拷贝的是父进程的页表，可以在不影响主进程的情况下逐一把拷贝的数据记入重写日志；</p>\n</li>\n<li><p>因为主线程没有阻塞，仍然可以处理新来的操作，如果这时候存在写操作，会先把操作先放入缓冲区，对于正在使用的日志，如果宕机了这个日志也是齐全的，可以用于恢复；对于正在更新的日志，也不会丢失新的操作，等到数据拷贝完成，就可以将缓冲区的数据写入到新的文件中，保证数据库的最新状态。</p>\n</li>\n</ul>\n<h3 id=\"RDB快照\"><a href=\"#RDB快照\" class=\"headerlink\" title=\"RDB快照\"></a>RDB快照</h3><p>RDB是一种快照存储持久化方式，具体就是将Redis某一时刻的内存数据保存到硬盘的文件当中，默认保存的文件名为dump.rdb，而在Redis服务器启动时，会重新加载dump.rdb文件的数据到内存当中恢复数据。</p>\n<p>为了 RDB 数据恢复的可靠性，在进行快照的时候是全量快照，会将内存中所有的数据都记录到磁盘中，这就有可能会阻塞主线程的执行。Redis 提供了两个命令来生成 RDB 文件，分别是 <strong>save</strong> 和 <strong>bgsave</strong> ：</p>\n<ul>\n<li><strong>save</strong>：执行 save 指令，阻塞 Redis 的其他操作，会导致 Redis 无法响应客户端请求，不建议使用。</li>\n<li><strong>bgsave</strong>：执行 bgsave 指令，Redis 后台创建子进程，异步进行快照的保存操作，此时 Redis 仍然能响应客户端的请求。</li>\n</ul>\n<h3 id=\"自动间隔保存\"><a href=\"#自动间隔保存\" class=\"headerlink\" title=\"自动间隔保存\"></a>自动间隔保存</h3><p>Redis 可以设置间隔性保存，让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时，自动保存一次数据集。比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 10 个键被改动”这一条件时，自动保存一次数据集：save 60 10</p>\n<p>Redis 的默认配置如下，三个设置满足其一就会触发自动保存：</p>\n<blockquote>\n<p>save  60  10000</p>\n<p>save  900  10</p>\n<p>save  300  1</p>\n</blockquote>\n<h3 id=\"RDB模式优点\"><a href=\"#RDB模式优点\" class=\"headerlink\" title=\"RDB模式优点\"></a>RDB模式优点</h3><ul>\n<li>相比AOF在恢复数据的时候需要一条条的执行操作命令，通过RDB文件恢复数据的效率更高；</li>\n<li>同样规模的内存数据，RDB文件数据更加紧凑，磁盘空间占用更小；</li>\n<li>适合全量备份内存数据场景；</li>\n<li>可以根据不同的时间间隔保存RDB文件，在恢复数据的时候可以更加灵活地选择对应版本数据进行恢复</li>\n</ul>\n<h3 id=\"RDB模式缺点\"><a href=\"#RDB模式缺点\" class=\"headerlink\" title=\"RDB模式缺点\"></a>RDB模式缺点</h3><ul>\n<li>由于RDB数据保存存在一定的时间间隔，因此存在丢失缓存数据的风险；</li>\n<li>fork子进程进行RDB文件生成，由于是一次性生成一个内存快照文件，对于服务器磁盘IO以及Redis本身来说都属于重操作，可能会对服务器的磁盘IO造成压力。</li>\n</ul>\n<h3 id=\"混合使用AOF日志和RDB快照\"><a href=\"#混合使用AOF日志和RDB快照\" class=\"headerlink\" title=\"混合使用AOF日志和RDB快照\"></a>混合使用AOF日志和RDB快照</h3><p>Redis4.0 后大部分的使用场景都不会单独使用 RDB 或者 AOF 来做持久化机制，而是兼顾二者的优势混合使用。其原因是 RDB 虽然快，但是会丢失比较多的数据，不能保证数据完整性；AOF 虽然能尽可能保证数据完整性，但是性能确实是一个诟病，比如重放恢复数据。  </p>\n<p>Redis从4.0版本开始引入 RDB-AOF 混合持久化模式，这种模式是基于 AOF 持久化模式构建而来的，混合持久化通过 <strong>aof-use-rdb-preamble yes</strong> 开启。这样的好处是 RDB 快照不需要很频繁的执行，可以避免频繁 fork 对主线程的影响，而且 AOF 日志也只记录两次快照期间的操作，不用记录所有操作，也不会出现文件过大的情况，避免了重写开销。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>本文主要分析了Redis AOF、RDB快照 以及混合持久化的内存数据持久化的机制原理，生产环境中推荐使用混合持久化，这种方式综合了RDB和AOF两种方式的优点。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"Redis的持久化机制\"><a href=\"#Redis的持久化机制\" class=\"headerlink\" title=\"Redis的持久化机制\"></a>Redis的持久化机制</h1><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>我们都知道，Redis 的数据存储在内存中, 一旦服务器宕机，内存中的数据将全部丢失。因此，对 Redis 来说，实现数据的持久化，避免从后端数据库中进行恢复，是至关重要的。本篇我们详细讲解下 Redis 的三种持久化机制，分别是 AOF（Append Only File） 日志和 RDB 快照 以及 混合持久化。</p>\n<h3 id=\"AOF机制\"><a href=\"#AOF机制\" class=\"headerlink\" title=\"AOF机制\"></a>AOF机制</h3><p>AOF 日志是写后日志，也就是 Redis 先执行命令，然后将数据写入内存，最后才记录日志，重启时通过执行 AOF 文件中的 Redis 命令来恢复数据。如下图所示：</p>\n<p><img src=\"https://developer.qcloudimg.com/http-save/yehe-10418638/693b4cb76c16876336e4c5a3a06fed27.png\"></p>\n<p>类似MySql bin-log 的原理，AOF 能够解决数据持久化实时性问题，是目前 Redis 持久化机制中主流的方案。</p>\n<h3 id=\"AOF持久化流程\"><a href=\"#AOF持久化流程\" class=\"headerlink\" title=\"AOF持久化流程\"></a>AOF持久化流程</h3><p>AOF 持久化方案进行备份时，客户端所有请求的写命令都会被追加到 AOF 缓冲区中，缓冲区中的数据会根据 Redis 配置文件中配置的同步策略来同步到磁盘上的 AOF 文件中，追加保存每次写的操作到文件末尾。当 AOF 的文件达到重写策略配置的阈值时，Redis 会对 AOF 日志文件进行重写，给 AOF 日志文件瘦身。Redis 服务重启的时候，通过加载 AOF 日志文件来恢复数据。如下图所示：</p>\n<p><img src=\"https://developer.qcloudimg.com/http-save/yehe-10418638/bc15aa10e9c9d41ef356faa07b60cb82.png\"></p>\n<h3 id=\"Redis-AOF-执行流程\"><a href=\"#Redis-AOF-执行流程\" class=\"headerlink\" title=\"Redis AOF 执行流程\"></a>Redis AOF 执行流程</h3><p>AOF 为了避免额外的检查开销，并不会检查命令的正确性，如果先记录日志再执行命令，就有可能记录错误的命令，再通过 AOF 日志恢复数据的时候，就有可能出错，而且在执行完命令后记录日志也不会阻塞当前的写操作。但是 AOF 是存在一定的风险的，首先是如果刚执行一个命令，但是 AOF 文件中还没来得及保存就宕机了，那么这个命令和数据就会有丢失的风险，另外 AOF 虽然可以避免对当前命令的阻塞（因为是先写入再记录日志），但有可能会对下一次操作带来阻塞风险（可能存在写入磁盘较慢的情况）。这两种情况都在于 AOF 什么时候写入磁盘，针对这个问题 AOF 机制提供了三种同步策略（appendfsync 参数）。</p>\n<h3 id=\"AOF-写入磁盘的同步策略\"><a href=\"#AOF-写入磁盘的同步策略\" class=\"headerlink\" title=\"AOF 写入磁盘的同步策略\"></a>AOF 写入磁盘的同步策略</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>同步策略</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Always</td>\n<td>同步写入磁盘，只要有写入就会调用fsync函数；</td>\n</tr>\n<tr>\n<td>Everysec</td>\n<td>每秒调用fsync函数一次，每个命令执行完，先把日志写入 AOF 文件的缓冲区，每隔一秒把缓冲区的内容写入磁盘</td>\n</tr>\n<tr>\n<td>No</td>\n<td>不调用fsync，让操作系统决定何时同步磁盘。每个命令执行完，先将日志写入 AOF 文件的缓冲区，由操作系统决定何时把缓冲区的内容写入磁盘</td>\n</tr>\n</tbody></table>\n<h3 id=\"三种同步策略的优缺点如下：\"><a href=\"#三种同步策略的优缺点如下：\" class=\"headerlink\" title=\"三种同步策略的优缺点如下：\"></a>三种同步策略的优缺点如下：</h3><ul>\n<li>Always：可靠性较高，数据基本不丢失，但是对性能影响较大</li>\n<li>Everysec：性能适中，及时宕机也只会丢失一秒的数据</li>\n<li>No：性能好，但发生当即情况时，</li>\n</ul>\n<h3 id=\"AOF重写\"><a href=\"#AOF重写\" class=\"headerlink\" title=\"AOF重写\"></a>AOF重写</h3><p>我们上面说过，AOF 属于日志追加的形式来存储 Redis 的写指令，虽然有一定的写回策略，但毕竟 AOF 是通过文件的形式记录所有的写命令，但如果指令越来越多的时候，AOF 文件就会越来越大，可能会超出文件大小的限制。如果发生宕机，需要把 AOF 所有的命令重新执行，以用于故障恢复，数据过大的话这个恢复过程越漫长，也会影响 Redis 的使用。因此 Redis 提供 <strong>重写机制</strong>来解决这个问题。</p>\n<p>AOF 重写的过程是通过主线程 fork 后台的 bgrewriteaof 子进程来实现的，可以避免阻塞主进导致性能下降，整个过程如下：</p>\n<ul>\n<li><p>AOF 每次重写，fork 过程会把主线程的内存拷贝一份 bgrewriteaof 子进程，里面包含了数据库的数据，拷贝的是父进程的页表，可以在不影响主进程的情况下逐一把拷贝的数据记入重写日志；</p>\n</li>\n<li><p>因为主线程没有阻塞，仍然可以处理新来的操作，如果这时候存在写操作，会先把操作先放入缓冲区，对于正在使用的日志，如果宕机了这个日志也是齐全的，可以用于恢复；对于正在更新的日志，也不会丢失新的操作，等到数据拷贝完成，就可以将缓冲区的数据写入到新的文件中，保证数据库的最新状态。</p>\n</li>\n</ul>\n<h3 id=\"RDB快照\"><a href=\"#RDB快照\" class=\"headerlink\" title=\"RDB快照\"></a>RDB快照</h3><p>RDB是一种快照存储持久化方式，具体就是将Redis某一时刻的内存数据保存到硬盘的文件当中，默认保存的文件名为dump.rdb，而在Redis服务器启动时，会重新加载dump.rdb文件的数据到内存当中恢复数据。</p>\n<p>为了 RDB 数据恢复的可靠性，在进行快照的时候是全量快照，会将内存中所有的数据都记录到磁盘中，这就有可能会阻塞主线程的执行。Redis 提供了两个命令来生成 RDB 文件，分别是 <strong>save</strong> 和 <strong>bgsave</strong> ：</p>\n<ul>\n<li><strong>save</strong>：执行 save 指令，阻塞 Redis 的其他操作，会导致 Redis 无法响应客户端请求，不建议使用。</li>\n<li><strong>bgsave</strong>：执行 bgsave 指令，Redis 后台创建子进程，异步进行快照的保存操作，此时 Redis 仍然能响应客户端的请求。</li>\n</ul>\n<h3 id=\"自动间隔保存\"><a href=\"#自动间隔保存\" class=\"headerlink\" title=\"自动间隔保存\"></a>自动间隔保存</h3><p>Redis 可以设置间隔性保存，让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时，自动保存一次数据集。比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 10 个键被改动”这一条件时，自动保存一次数据集：save 60 10</p>\n<p>Redis 的默认配置如下，三个设置满足其一就会触发自动保存：</p>\n<blockquote>\n<p>save  60  10000</p>\n<p>save  900  10</p>\n<p>save  300  1</p>\n</blockquote>\n<h3 id=\"RDB模式优点\"><a href=\"#RDB模式优点\" class=\"headerlink\" title=\"RDB模式优点\"></a>RDB模式优点</h3><ul>\n<li>相比AOF在恢复数据的时候需要一条条的执行操作命令，通过RDB文件恢复数据的效率更高；</li>\n<li>同样规模的内存数据，RDB文件数据更加紧凑，磁盘空间占用更小；</li>\n<li>适合全量备份内存数据场景；</li>\n<li>可以根据不同的时间间隔保存RDB文件，在恢复数据的时候可以更加灵活地选择对应版本数据进行恢复</li>\n</ul>\n<h3 id=\"RDB模式缺点\"><a href=\"#RDB模式缺点\" class=\"headerlink\" title=\"RDB模式缺点\"></a>RDB模式缺点</h3><ul>\n<li>由于RDB数据保存存在一定的时间间隔，因此存在丢失缓存数据的风险；</li>\n<li>fork子进程进行RDB文件生成，由于是一次性生成一个内存快照文件，对于服务器磁盘IO以及Redis本身来说都属于重操作，可能会对服务器的磁盘IO造成压力。</li>\n</ul>\n<h3 id=\"混合使用AOF日志和RDB快照\"><a href=\"#混合使用AOF日志和RDB快照\" class=\"headerlink\" title=\"混合使用AOF日志和RDB快照\"></a>混合使用AOF日志和RDB快照</h3><p>Redis4.0 后大部分的使用场景都不会单独使用 RDB 或者 AOF 来做持久化机制，而是兼顾二者的优势混合使用。其原因是 RDB 虽然快，但是会丢失比较多的数据，不能保证数据完整性；AOF 虽然能尽可能保证数据完整性，但是性能确实是一个诟病，比如重放恢复数据。  </p>\n<p>Redis从4.0版本开始引入 RDB-AOF 混合持久化模式，这种模式是基于 AOF 持久化模式构建而来的，混合持久化通过 <strong>aof-use-rdb-preamble yes</strong> 开启。这样的好处是 RDB 快照不需要很频繁的执行，可以避免频繁 fork 对主线程的影响，而且 AOF 日志也只记录两次快照期间的操作，不用记录所有操作，也不会出现文件过大的情况，避免了重写开销。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>本文主要分析了Redis AOF、RDB快照 以及混合持久化的内存数据持久化的机制原理，生产环境中推荐使用混合持久化，这种方式综合了RDB和AOF两种方式的优点。</p>\n"},{"title":"Mysql的执行流程","abbrlink":"10a134a","date":"2023-09-26T13:03:07.000Z","_content":"\n# Mysql的执行流程\n\n### 引言\n\nMysql是我们在开发中经常用到的中间件，了解sql语句在MySQL的执行步骤，对我们从查询语句、mysql配置、数据恢复等方面优化mysql的性能有很大帮助。\n\n### Mysql的整体架构\n\n以下为MySQL数据库中SQL语句在的简要执行流程\n\n![](Mysql的执行流程/20210711173835627.jpg)\n\n简单来说 MySQL 主要分为 Server 层和存储引擎层。**Server层**主要包括连接器、查询缓存、分析器、优化器、执行器等，还有一个通用binlog日志模块(用于整个数据库操作记录，主从复制的关键)。存储引擎层主要负责数据的存储和读取。\n\n#### 1.连接器\n\n连接器负责跟客户端建立连接、获取权限、维持和管理连接。一般使用数据库管理工具(eg:Navicat)或者在安装mysql的服务器直接输入以下命令：\n\n```cmd\nroot@bac8f643c3e9:/# mysql -h10.10.0.18 -p3306 -uroot -p\n```\n\n主要负责用户登录数据库，进行用户的身份认证，包括校验账户密码，权限等操作，如果用户账户密码已通过，连接器会到权限表中查询该用户的所有权限，之后在这个连接里的权限逻辑判断都是会依赖此时读取到的权限数据，也就是说，后续只要这个连接不断开，即时管理员修改了该用户的权限，该用户也是不受影响的。\n\n#### 2. 查询缓存(MySQL 8.0 版本后移除)\n\n查询缓存主要用来缓存我们所执行的 SELECT 语句以及该语句的结果集。\n\n连接建立后，执行查询语句的时候，会先查询缓存，MySQL 会先校验这个 sql 是否执行过，以 Key-Value 的形式缓存在内存中，Key 是查询预计，Value 是结果集。如果缓存 key 被命中，就会直接返回给客户端，如果没有命中，就会执行后续的操作，完成后也会把结果缓存起来，方便下一次调用。**当然在真正执行缓存查询的时候还是会校验用户的权限，是否有该表的查询条件**。\n\n**MySQL 查询不建议使用缓存，因为查询缓存失效在实际业务场景中可能会非常频繁，假如你对一个表更新的话，这个表上的所有的查询缓存都会被清空。对于不经常更新的数据来说，使用缓存还是可以的。**\n\n所以，一般在大多数情况下我们都是不推荐去使用查询缓存的。\n\nMySQL 8.0 版本后删除了缓存的功能，官方也是认为该功能在实际的应用场景比较少，所以干脆直接删掉了。\n\n#### 3.分析器\n\nMySQL 没有命中缓存，那么就会进入分析器，分析器主要是用来分析 SQL 语句是来干嘛的，分析器也会分为几步：\n\n> **第一步，词法分析**，一条 SQL 语句有多个字符串组成，首先要提取关键字，比如 select，提出查询的表，提出字段名，提出查询条件等等。做完这些操作后，就会进入第二步。\n>\n> **第二步，语法分析**，主要就是判断你输入的 sql 是否正确，是否符合 MySQL 的语法。\n\n完成这 2 步之后，MySQL 就准备开始执行了，但是如何执行，怎么执行是最好的结果呢？这个时候就需要优化器上场了。\n\n**大部分sql执行报错都在分析器这一步**\n\n#### 4.优化器\n\n优化器的作用就是它认为的最优的执行方案去执行（有时候可能也不是最优解），比如多个索引的时候该如何选择索引，多表查询的时候如何选择关联顺序等。\n\n可以说，经过了优化器之后可以说这个语句具体该如何执行就已经定下来。\n\n#### 5.执行器\n\n当选择了执行方案后，MySQL 就准备开始执行了，首先执行前会校验该用户有没有权限，如果没有权限，就会返回错误信息，如果有权限，就会去调用引擎的接口，返回接口执行的结果。开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误。\n\n**这里说明一下为什么查询表的执行权限不在优化器之前检测？**\n\n**是因为有些时候，SQL语句要操作的表不只是SQL字面上那些。比如如果有个触发器，得在执行器阶段（过程中）才能确定。优化器阶段前是无能为力的。**\n\n### 一条SQL的生命历程\n\n了解了Mysql的整体架构后，我们来分析一下一条SQL语句的执行过程\n\n1. 一条SQL的诞生首先需要通过某种方式传递给[数据库](https://cloud.tencent.com/solution/database?from_column=20065&from=20065)。数据库会有一个客户端用来与外界交流，而作为提交SQL的一方，可以通过ODBC或者是JDBC协议直接将SQL提交给数据库，除此以外，还可以通过Web服务等第三方服务将SQL提交给数据库。\n2. 数据库接受SQL语句后，会根据现有的情况预先计算相应的算力，决定是不是应该立即执行这条SQL以及是否有足够的资源执行完这句SQL。一般这个任务被称为“Process Manager”。\n3. 当这条SQL获得相应的算力后，SQL就会开始进行计算了，首先会调用语句处理器，检查调用者是否有足够权限执行这条SQL，接下来编译这条SQL文本成内部执行计划。内部执行计划会包含各种“算子”，例如聚合，投影，选择以及join。\n4. 在执行计划中会存在很多算子，这时需要一个事务处理器帮忙决定数据的增删改查。存储系统会包含数据以及相应的数据结构和算法，决定着缓存和磁盘数据的平衡。事务处理除了管控数据外，还需要保证数据库的“ACID”性质，并行处理数据时给数据上锁，确保数据被正确写入磁盘。\n5. 此时的SQL已经获得了数据并且开始相应的计算，返回相应的结果给调用者。\n\n### 结束\n\n以上就是我对Mysql的执行流程的一点见解，对于一条SQL语句的生命周期还有很多细节，欢迎小伙伴在评论区补充。\n","source":"_posts/Mysql的执行流程.md","raw":"---\ntitle: Mysql的执行流程\ncategories:\n  - 中间件\ntags:\n  - Mysql\nabbrlink: 10a134a\ndate: 2023-09-26 21:03:07\n---\n\n# Mysql的执行流程\n\n### 引言\n\nMysql是我们在开发中经常用到的中间件，了解sql语句在MySQL的执行步骤，对我们从查询语句、mysql配置、数据恢复等方面优化mysql的性能有很大帮助。\n\n### Mysql的整体架构\n\n以下为MySQL数据库中SQL语句在的简要执行流程\n\n![](Mysql的执行流程/20210711173835627.jpg)\n\n简单来说 MySQL 主要分为 Server 层和存储引擎层。**Server层**主要包括连接器、查询缓存、分析器、优化器、执行器等，还有一个通用binlog日志模块(用于整个数据库操作记录，主从复制的关键)。存储引擎层主要负责数据的存储和读取。\n\n#### 1.连接器\n\n连接器负责跟客户端建立连接、获取权限、维持和管理连接。一般使用数据库管理工具(eg:Navicat)或者在安装mysql的服务器直接输入以下命令：\n\n```cmd\nroot@bac8f643c3e9:/# mysql -h10.10.0.18 -p3306 -uroot -p\n```\n\n主要负责用户登录数据库，进行用户的身份认证，包括校验账户密码，权限等操作，如果用户账户密码已通过，连接器会到权限表中查询该用户的所有权限，之后在这个连接里的权限逻辑判断都是会依赖此时读取到的权限数据，也就是说，后续只要这个连接不断开，即时管理员修改了该用户的权限，该用户也是不受影响的。\n\n#### 2. 查询缓存(MySQL 8.0 版本后移除)\n\n查询缓存主要用来缓存我们所执行的 SELECT 语句以及该语句的结果集。\n\n连接建立后，执行查询语句的时候，会先查询缓存，MySQL 会先校验这个 sql 是否执行过，以 Key-Value 的形式缓存在内存中，Key 是查询预计，Value 是结果集。如果缓存 key 被命中，就会直接返回给客户端，如果没有命中，就会执行后续的操作，完成后也会把结果缓存起来，方便下一次调用。**当然在真正执行缓存查询的时候还是会校验用户的权限，是否有该表的查询条件**。\n\n**MySQL 查询不建议使用缓存，因为查询缓存失效在实际业务场景中可能会非常频繁，假如你对一个表更新的话，这个表上的所有的查询缓存都会被清空。对于不经常更新的数据来说，使用缓存还是可以的。**\n\n所以，一般在大多数情况下我们都是不推荐去使用查询缓存的。\n\nMySQL 8.0 版本后删除了缓存的功能，官方也是认为该功能在实际的应用场景比较少，所以干脆直接删掉了。\n\n#### 3.分析器\n\nMySQL 没有命中缓存，那么就会进入分析器，分析器主要是用来分析 SQL 语句是来干嘛的，分析器也会分为几步：\n\n> **第一步，词法分析**，一条 SQL 语句有多个字符串组成，首先要提取关键字，比如 select，提出查询的表，提出字段名，提出查询条件等等。做完这些操作后，就会进入第二步。\n>\n> **第二步，语法分析**，主要就是判断你输入的 sql 是否正确，是否符合 MySQL 的语法。\n\n完成这 2 步之后，MySQL 就准备开始执行了，但是如何执行，怎么执行是最好的结果呢？这个时候就需要优化器上场了。\n\n**大部分sql执行报错都在分析器这一步**\n\n#### 4.优化器\n\n优化器的作用就是它认为的最优的执行方案去执行（有时候可能也不是最优解），比如多个索引的时候该如何选择索引，多表查询的时候如何选择关联顺序等。\n\n可以说，经过了优化器之后可以说这个语句具体该如何执行就已经定下来。\n\n#### 5.执行器\n\n当选择了执行方案后，MySQL 就准备开始执行了，首先执行前会校验该用户有没有权限，如果没有权限，就会返回错误信息，如果有权限，就会去调用引擎的接口，返回接口执行的结果。开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误。\n\n**这里说明一下为什么查询表的执行权限不在优化器之前检测？**\n\n**是因为有些时候，SQL语句要操作的表不只是SQL字面上那些。比如如果有个触发器，得在执行器阶段（过程中）才能确定。优化器阶段前是无能为力的。**\n\n### 一条SQL的生命历程\n\n了解了Mysql的整体架构后，我们来分析一下一条SQL语句的执行过程\n\n1. 一条SQL的诞生首先需要通过某种方式传递给[数据库](https://cloud.tencent.com/solution/database?from_column=20065&from=20065)。数据库会有一个客户端用来与外界交流，而作为提交SQL的一方，可以通过ODBC或者是JDBC协议直接将SQL提交给数据库，除此以外，还可以通过Web服务等第三方服务将SQL提交给数据库。\n2. 数据库接受SQL语句后，会根据现有的情况预先计算相应的算力，决定是不是应该立即执行这条SQL以及是否有足够的资源执行完这句SQL。一般这个任务被称为“Process Manager”。\n3. 当这条SQL获得相应的算力后，SQL就会开始进行计算了，首先会调用语句处理器，检查调用者是否有足够权限执行这条SQL，接下来编译这条SQL文本成内部执行计划。内部执行计划会包含各种“算子”，例如聚合，投影，选择以及join。\n4. 在执行计划中会存在很多算子，这时需要一个事务处理器帮忙决定数据的增删改查。存储系统会包含数据以及相应的数据结构和算法，决定着缓存和磁盘数据的平衡。事务处理除了管控数据外，还需要保证数据库的“ACID”性质，并行处理数据时给数据上锁，确保数据被正确写入磁盘。\n5. 此时的SQL已经获得了数据并且开始相应的计算，返回相应的结果给调用者。\n\n### 结束\n\n以上就是我对Mysql的执行流程的一点见解，对于一条SQL语句的生命周期还有很多细节，欢迎小伙伴在评论区补充。\n","slug":"Mysql的执行流程","published":1,"updated":"2023-09-30T00:56:39.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln5lvfc20007fwug0bdbg89m","content":"<h1 id=\"Mysql的执行流程\"><a href=\"#Mysql的执行流程\" class=\"headerlink\" title=\"Mysql的执行流程\"></a>Mysql的执行流程</h1><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>Mysql是我们在开发中经常用到的中间件，了解sql语句在MySQL的执行步骤，对我们从查询语句、mysql配置、数据恢复等方面优化mysql的性能有很大帮助。</p>\n<h3 id=\"Mysql的整体架构\"><a href=\"#Mysql的整体架构\" class=\"headerlink\" title=\"Mysql的整体架构\"></a>Mysql的整体架构</h3><p>以下为MySQL数据库中SQL语句在的简要执行流程</p>\n<p><img src=\"/posts/10a134a/20210711173835627.jpg\"></p>\n<p>简单来说 MySQL 主要分为 Server 层和存储引擎层。<strong>Server层</strong>主要包括连接器、查询缓存、分析器、优化器、执行器等，还有一个通用binlog日志模块(用于整个数据库操作记录，主从复制的关键)。存储引擎层主要负责数据的存储和读取。</p>\n<h4 id=\"1-连接器\"><a href=\"#1-连接器\" class=\"headerlink\" title=\"1.连接器\"></a>1.连接器</h4><p>连接器负责跟客户端建立连接、获取权限、维持和管理连接。一般使用数据库管理工具(eg:Navicat)或者在安装mysql的服务器直接输入以下命令：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">root@bac8f643c3e9:/# <span class=\"title\">mysql</span> -<span class=\"title\">h10</span>.10.0.18 -<span class=\"title\">p3306</span> -<span class=\"title\">uroot</span> -<span class=\"title\">p</span></span></span><br></pre></td></tr></table></figure>\n\n<p>主要负责用户登录数据库，进行用户的身份认证，包括校验账户密码，权限等操作，如果用户账户密码已通过，连接器会到权限表中查询该用户的所有权限，之后在这个连接里的权限逻辑判断都是会依赖此时读取到的权限数据，也就是说，后续只要这个连接不断开，即时管理员修改了该用户的权限，该用户也是不受影响的。</p>\n<h4 id=\"2-查询缓存-MySQL-8-0-版本后移除\"><a href=\"#2-查询缓存-MySQL-8-0-版本后移除\" class=\"headerlink\" title=\"2. 查询缓存(MySQL 8.0 版本后移除)\"></a>2. 查询缓存(MySQL 8.0 版本后移除)</h4><p>查询缓存主要用来缓存我们所执行的 SELECT 语句以及该语句的结果集。</p>\n<p>连接建立后，执行查询语句的时候，会先查询缓存，MySQL 会先校验这个 sql 是否执行过，以 Key-Value 的形式缓存在内存中，Key 是查询预计，Value 是结果集。如果缓存 key 被命中，就会直接返回给客户端，如果没有命中，就会执行后续的操作，完成后也会把结果缓存起来，方便下一次调用。<strong>当然在真正执行缓存查询的时候还是会校验用户的权限，是否有该表的查询条件</strong>。</p>\n<p><strong>MySQL 查询不建议使用缓存，因为查询缓存失效在实际业务场景中可能会非常频繁，假如你对一个表更新的话，这个表上的所有的查询缓存都会被清空。对于不经常更新的数据来说，使用缓存还是可以的。</strong></p>\n<p>所以，一般在大多数情况下我们都是不推荐去使用查询缓存的。</p>\n<p>MySQL 8.0 版本后删除了缓存的功能，官方也是认为该功能在实际的应用场景比较少，所以干脆直接删掉了。</p>\n<h4 id=\"3-分析器\"><a href=\"#3-分析器\" class=\"headerlink\" title=\"3.分析器\"></a>3.分析器</h4><p>MySQL 没有命中缓存，那么就会进入分析器，分析器主要是用来分析 SQL 语句是来干嘛的，分析器也会分为几步：</p>\n<blockquote>\n<p><strong>第一步，词法分析</strong>，一条 SQL 语句有多个字符串组成，首先要提取关键字，比如 select，提出查询的表，提出字段名，提出查询条件等等。做完这些操作后，就会进入第二步。</p>\n<p><strong>第二步，语法分析</strong>，主要就是判断你输入的 sql 是否正确，是否符合 MySQL 的语法。</p>\n</blockquote>\n<p>完成这 2 步之后，MySQL 就准备开始执行了，但是如何执行，怎么执行是最好的结果呢？这个时候就需要优化器上场了。</p>\n<p><strong>大部分sql执行报错都在分析器这一步</strong></p>\n<h4 id=\"4-优化器\"><a href=\"#4-优化器\" class=\"headerlink\" title=\"4.优化器\"></a>4.优化器</h4><p>优化器的作用就是它认为的最优的执行方案去执行（有时候可能也不是最优解），比如多个索引的时候该如何选择索引，多表查询的时候如何选择关联顺序等。</p>\n<p>可以说，经过了优化器之后可以说这个语句具体该如何执行就已经定下来。</p>\n<h4 id=\"5-执行器\"><a href=\"#5-执行器\" class=\"headerlink\" title=\"5.执行器\"></a>5.执行器</h4><p>当选择了执行方案后，MySQL 就准备开始执行了，首先执行前会校验该用户有没有权限，如果没有权限，就会返回错误信息，如果有权限，就会去调用引擎的接口，返回接口执行的结果。开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误。</p>\n<p><strong>这里说明一下为什么查询表的执行权限不在优化器之前检测？</strong></p>\n<p><strong>是因为有些时候，SQL语句要操作的表不只是SQL字面上那些。比如如果有个触发器，得在执行器阶段（过程中）才能确定。优化器阶段前是无能为力的。</strong></p>\n<h3 id=\"一条SQL的生命历程\"><a href=\"#一条SQL的生命历程\" class=\"headerlink\" title=\"一条SQL的生命历程\"></a>一条SQL的生命历程</h3><p>了解了Mysql的整体架构后，我们来分析一下一条SQL语句的执行过程</p>\n<ol>\n<li>一条SQL的诞生首先需要通过某种方式传递给<a href=\"https://cloud.tencent.com/solution/database?from_column=20065&from=20065\">数据库</a>。数据库会有一个客户端用来与外界交流，而作为提交SQL的一方，可以通过ODBC或者是JDBC协议直接将SQL提交给数据库，除此以外，还可以通过Web服务等第三方服务将SQL提交给数据库。</li>\n<li>数据库接受SQL语句后，会根据现有的情况预先计算相应的算力，决定是不是应该立即执行这条SQL以及是否有足够的资源执行完这句SQL。一般这个任务被称为“Process Manager”。</li>\n<li>当这条SQL获得相应的算力后，SQL就会开始进行计算了，首先会调用语句处理器，检查调用者是否有足够权限执行这条SQL，接下来编译这条SQL文本成内部执行计划。内部执行计划会包含各种“算子”，例如聚合，投影，选择以及join。</li>\n<li>在执行计划中会存在很多算子，这时需要一个事务处理器帮忙决定数据的增删改查。存储系统会包含数据以及相应的数据结构和算法，决定着缓存和磁盘数据的平衡。事务处理除了管控数据外，还需要保证数据库的“ACID”性质，并行处理数据时给数据上锁，确保数据被正确写入磁盘。</li>\n<li>此时的SQL已经获得了数据并且开始相应的计算，返回相应的结果给调用者。</li>\n</ol>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>以上就是我对Mysql的执行流程的一点见解，对于一条SQL语句的生命周期还有很多细节，欢迎小伙伴在评论区补充。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"Mysql的执行流程\"><a href=\"#Mysql的执行流程\" class=\"headerlink\" title=\"Mysql的执行流程\"></a>Mysql的执行流程</h1><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>Mysql是我们在开发中经常用到的中间件，了解sql语句在MySQL的执行步骤，对我们从查询语句、mysql配置、数据恢复等方面优化mysql的性能有很大帮助。</p>\n<h3 id=\"Mysql的整体架构\"><a href=\"#Mysql的整体架构\" class=\"headerlink\" title=\"Mysql的整体架构\"></a>Mysql的整体架构</h3><p>以下为MySQL数据库中SQL语句在的简要执行流程</p>\n<p><img src=\"/posts/10a134a/20210711173835627.jpg\"></p>\n<p>简单来说 MySQL 主要分为 Server 层和存储引擎层。<strong>Server层</strong>主要包括连接器、查询缓存、分析器、优化器、执行器等，还有一个通用binlog日志模块(用于整个数据库操作记录，主从复制的关键)。存储引擎层主要负责数据的存储和读取。</p>\n<h4 id=\"1-连接器\"><a href=\"#1-连接器\" class=\"headerlink\" title=\"1.连接器\"></a>1.连接器</h4><p>连接器负责跟客户端建立连接、获取权限、维持和管理连接。一般使用数据库管理工具(eg:Navicat)或者在安装mysql的服务器直接输入以下命令：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">root@bac8f643c3e9:/# <span class=\"title\">mysql</span> -<span class=\"title\">h10</span>.10.0.18 -<span class=\"title\">p3306</span> -<span class=\"title\">uroot</span> -<span class=\"title\">p</span></span></span><br></pre></td></tr></table></figure>\n\n<p>主要负责用户登录数据库，进行用户的身份认证，包括校验账户密码，权限等操作，如果用户账户密码已通过，连接器会到权限表中查询该用户的所有权限，之后在这个连接里的权限逻辑判断都是会依赖此时读取到的权限数据，也就是说，后续只要这个连接不断开，即时管理员修改了该用户的权限，该用户也是不受影响的。</p>\n<h4 id=\"2-查询缓存-MySQL-8-0-版本后移除\"><a href=\"#2-查询缓存-MySQL-8-0-版本后移除\" class=\"headerlink\" title=\"2. 查询缓存(MySQL 8.0 版本后移除)\"></a>2. 查询缓存(MySQL 8.0 版本后移除)</h4><p>查询缓存主要用来缓存我们所执行的 SELECT 语句以及该语句的结果集。</p>\n<p>连接建立后，执行查询语句的时候，会先查询缓存，MySQL 会先校验这个 sql 是否执行过，以 Key-Value 的形式缓存在内存中，Key 是查询预计，Value 是结果集。如果缓存 key 被命中，就会直接返回给客户端，如果没有命中，就会执行后续的操作，完成后也会把结果缓存起来，方便下一次调用。<strong>当然在真正执行缓存查询的时候还是会校验用户的权限，是否有该表的查询条件</strong>。</p>\n<p><strong>MySQL 查询不建议使用缓存，因为查询缓存失效在实际业务场景中可能会非常频繁，假如你对一个表更新的话，这个表上的所有的查询缓存都会被清空。对于不经常更新的数据来说，使用缓存还是可以的。</strong></p>\n<p>所以，一般在大多数情况下我们都是不推荐去使用查询缓存的。</p>\n<p>MySQL 8.0 版本后删除了缓存的功能，官方也是认为该功能在实际的应用场景比较少，所以干脆直接删掉了。</p>\n<h4 id=\"3-分析器\"><a href=\"#3-分析器\" class=\"headerlink\" title=\"3.分析器\"></a>3.分析器</h4><p>MySQL 没有命中缓存，那么就会进入分析器，分析器主要是用来分析 SQL 语句是来干嘛的，分析器也会分为几步：</p>\n<blockquote>\n<p><strong>第一步，词法分析</strong>，一条 SQL 语句有多个字符串组成，首先要提取关键字，比如 select，提出查询的表，提出字段名，提出查询条件等等。做完这些操作后，就会进入第二步。</p>\n<p><strong>第二步，语法分析</strong>，主要就是判断你输入的 sql 是否正确，是否符合 MySQL 的语法。</p>\n</blockquote>\n<p>完成这 2 步之后，MySQL 就准备开始执行了，但是如何执行，怎么执行是最好的结果呢？这个时候就需要优化器上场了。</p>\n<p><strong>大部分sql执行报错都在分析器这一步</strong></p>\n<h4 id=\"4-优化器\"><a href=\"#4-优化器\" class=\"headerlink\" title=\"4.优化器\"></a>4.优化器</h4><p>优化器的作用就是它认为的最优的执行方案去执行（有时候可能也不是最优解），比如多个索引的时候该如何选择索引，多表查询的时候如何选择关联顺序等。</p>\n<p>可以说，经过了优化器之后可以说这个语句具体该如何执行就已经定下来。</p>\n<h4 id=\"5-执行器\"><a href=\"#5-执行器\" class=\"headerlink\" title=\"5.执行器\"></a>5.执行器</h4><p>当选择了执行方案后，MySQL 就准备开始执行了，首先执行前会校验该用户有没有权限，如果没有权限，就会返回错误信息，如果有权限，就会去调用引擎的接口，返回接口执行的结果。开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误。</p>\n<p><strong>这里说明一下为什么查询表的执行权限不在优化器之前检测？</strong></p>\n<p><strong>是因为有些时候，SQL语句要操作的表不只是SQL字面上那些。比如如果有个触发器，得在执行器阶段（过程中）才能确定。优化器阶段前是无能为力的。</strong></p>\n<h3 id=\"一条SQL的生命历程\"><a href=\"#一条SQL的生命历程\" class=\"headerlink\" title=\"一条SQL的生命历程\"></a>一条SQL的生命历程</h3><p>了解了Mysql的整体架构后，我们来分析一下一条SQL语句的执行过程</p>\n<ol>\n<li>一条SQL的诞生首先需要通过某种方式传递给<a href=\"https://cloud.tencent.com/solution/database?from_column=20065&from=20065\">数据库</a>。数据库会有一个客户端用来与外界交流，而作为提交SQL的一方，可以通过ODBC或者是JDBC协议直接将SQL提交给数据库，除此以外，还可以通过Web服务等第三方服务将SQL提交给数据库。</li>\n<li>数据库接受SQL语句后，会根据现有的情况预先计算相应的算力，决定是不是应该立即执行这条SQL以及是否有足够的资源执行完这句SQL。一般这个任务被称为“Process Manager”。</li>\n<li>当这条SQL获得相应的算力后，SQL就会开始进行计算了，首先会调用语句处理器，检查调用者是否有足够权限执行这条SQL，接下来编译这条SQL文本成内部执行计划。内部执行计划会包含各种“算子”，例如聚合，投影，选择以及join。</li>\n<li>在执行计划中会存在很多算子，这时需要一个事务处理器帮忙决定数据的增删改查。存储系统会包含数据以及相应的数据结构和算法，决定着缓存和磁盘数据的平衡。事务处理除了管控数据外，还需要保证数据库的“ACID”性质，并行处理数据时给数据上锁，确保数据被正确写入磁盘。</li>\n<li>此时的SQL已经获得了数据并且开始相应的计算，返回相应的结果给调用者。</li>\n</ol>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>以上就是我对Mysql的执行流程的一点见解，对于一条SQL语句的生命周期还有很多细节，欢迎小伙伴在评论区补充。</p>\n"},{"title":"Hello World","abbrlink":"4a17b156","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\nabbrlink: 4a17b156\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-09-05T08:19:42.618Z","updated":"2023-09-23T07:24:15.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln5lvfc30008fwug2etl2ffr","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"redis的内存淘汰策略","abbrlink":"153f114c","date":"2023-09-14T04:58:45.000Z","_content":"\n# Redis的内存淘汰策略\n\n### 引言\n\nRedis是一个基于内存的高性能非关系型数据库，主要的特点是高可用，速度快，分布式；在通常的开发中用作缓存来分担数据库的压力。一般情况下，当内存超出物理内存限制时，内存数据将与磁盘产生频繁交换(swap)，swap会导致redis性能急剧下降，对于访问量较大的情况下，swap的存取效率会让服务基本处于不可用的状态。  \n\n在生产环境中，一般不允许redis出现swap行为，redis提供了 maxmemory 设置其最多可占用的内存空间。  \n\n当redis使用的内存超出maxmemory时，此时已经没有多余可用的内存空间，新的数据将无法写入，redis提供了几种数据淘汰策略，用于清理数据，腾出空间以继续提供服务。\n\n### 淘汰策略\n\n1. noeviction\n\n   可读不可写，即不会继续服务写请求，读请求可以继续进行。该策略不会是数据丢失，但由于生产的写请求不可用也同样无法让业务在进行下去，这种策略是默认的。\n\n2. volatile-lru\n\n   淘汰具有过期时间的key，最少使用的key优先淘汰，没有过期时间的key不会被淘汰，该策略可以保证持久化的数据不被丢失。\n\n3. volatile-ttl\n\n   与volatile-lru类似，二者区别是比较过期时间ttl的值，值越小的数据优先淘汰\n\n4. volatile-random\n\n   与2、3类似，区别是随机淘汰有过期时间的key，但不考虑使用频率和过期时间的长短\n\n5. allkeys-lru\n\n   与2类似，区别是该淘汰策略是淘汰redis中所有的key，不区分过期时间，但是区分使用频率。\n\n6. 与 5 类似，范围是所有的key，但是不区分使用频率。\n\nvolatile开头的只会淘汰带有过期时间的key，allkeys则是所有的key，如果redis只是作为缓存使用，可以使用allkeys，如果有些数据是务必持久化的，则使用volatile。\n","source":"_posts/redis的内存淘汰策略.md","raw":"---\ntitle: redis的内存淘汰策略\ncategories:\n  - 中间件\ntags:\n  - redis\nabbrlink: 153f114c\ndate: 2023-09-14 12:58:45\n---\n\n# Redis的内存淘汰策略\n\n### 引言\n\nRedis是一个基于内存的高性能非关系型数据库，主要的特点是高可用，速度快，分布式；在通常的开发中用作缓存来分担数据库的压力。一般情况下，当内存超出物理内存限制时，内存数据将与磁盘产生频繁交换(swap)，swap会导致redis性能急剧下降，对于访问量较大的情况下，swap的存取效率会让服务基本处于不可用的状态。  \n\n在生产环境中，一般不允许redis出现swap行为，redis提供了 maxmemory 设置其最多可占用的内存空间。  \n\n当redis使用的内存超出maxmemory时，此时已经没有多余可用的内存空间，新的数据将无法写入，redis提供了几种数据淘汰策略，用于清理数据，腾出空间以继续提供服务。\n\n### 淘汰策略\n\n1. noeviction\n\n   可读不可写，即不会继续服务写请求，读请求可以继续进行。该策略不会是数据丢失，但由于生产的写请求不可用也同样无法让业务在进行下去，这种策略是默认的。\n\n2. volatile-lru\n\n   淘汰具有过期时间的key，最少使用的key优先淘汰，没有过期时间的key不会被淘汰，该策略可以保证持久化的数据不被丢失。\n\n3. volatile-ttl\n\n   与volatile-lru类似，二者区别是比较过期时间ttl的值，值越小的数据优先淘汰\n\n4. volatile-random\n\n   与2、3类似，区别是随机淘汰有过期时间的key，但不考虑使用频率和过期时间的长短\n\n5. allkeys-lru\n\n   与2类似，区别是该淘汰策略是淘汰redis中所有的key，不区分过期时间，但是区分使用频率。\n\n6. 与 5 类似，范围是所有的key，但是不区分使用频率。\n\nvolatile开头的只会淘汰带有过期时间的key，allkeys则是所有的key，如果redis只是作为缓存使用，可以使用allkeys，如果有些数据是务必持久化的，则使用volatile。\n","slug":"redis的内存淘汰策略","published":1,"updated":"2023-09-23T13:07:40.598Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln5lvfc6000cfwug93vg1yl2","content":"<h1 id=\"Redis的内存淘汰策略\"><a href=\"#Redis的内存淘汰策略\" class=\"headerlink\" title=\"Redis的内存淘汰策略\"></a>Redis的内存淘汰策略</h1><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>Redis是一个基于内存的高性能非关系型数据库，主要的特点是高可用，速度快，分布式；在通常的开发中用作缓存来分担数据库的压力。一般情况下，当内存超出物理内存限制时，内存数据将与磁盘产生频繁交换(swap)，swap会导致redis性能急剧下降，对于访问量较大的情况下，swap的存取效率会让服务基本处于不可用的状态。  </p>\n<p>在生产环境中，一般不允许redis出现swap行为，redis提供了 maxmemory 设置其最多可占用的内存空间。  </p>\n<p>当redis使用的内存超出maxmemory时，此时已经没有多余可用的内存空间，新的数据将无法写入，redis提供了几种数据淘汰策略，用于清理数据，腾出空间以继续提供服务。</p>\n<h3 id=\"淘汰策略\"><a href=\"#淘汰策略\" class=\"headerlink\" title=\"淘汰策略\"></a>淘汰策略</h3><ol>\n<li><p>noeviction</p>\n<p>可读不可写，即不会继续服务写请求，读请求可以继续进行。该策略不会是数据丢失，但由于生产的写请求不可用也同样无法让业务在进行下去，这种策略是默认的。</p>\n</li>\n<li><p>volatile-lru</p>\n<p>淘汰具有过期时间的key，最少使用的key优先淘汰，没有过期时间的key不会被淘汰，该策略可以保证持久化的数据不被丢失。</p>\n</li>\n<li><p>volatile-ttl</p>\n<p>与volatile-lru类似，二者区别是比较过期时间ttl的值，值越小的数据优先淘汰</p>\n</li>\n<li><p>volatile-random</p>\n<p>与2、3类似，区别是随机淘汰有过期时间的key，但不考虑使用频率和过期时间的长短</p>\n</li>\n<li><p>allkeys-lru</p>\n<p>与2类似，区别是该淘汰策略是淘汰redis中所有的key，不区分过期时间，但是区分使用频率。</p>\n</li>\n<li><p>与 5 类似，范围是所有的key，但是不区分使用频率。</p>\n</li>\n</ol>\n<p>volatile开头的只会淘汰带有过期时间的key，allkeys则是所有的key，如果redis只是作为缓存使用，可以使用allkeys，如果有些数据是务必持久化的，则使用volatile。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"Redis的内存淘汰策略\"><a href=\"#Redis的内存淘汰策略\" class=\"headerlink\" title=\"Redis的内存淘汰策略\"></a>Redis的内存淘汰策略</h1><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>Redis是一个基于内存的高性能非关系型数据库，主要的特点是高可用，速度快，分布式；在通常的开发中用作缓存来分担数据库的压力。一般情况下，当内存超出物理内存限制时，内存数据将与磁盘产生频繁交换(swap)，swap会导致redis性能急剧下降，对于访问量较大的情况下，swap的存取效率会让服务基本处于不可用的状态。  </p>\n<p>在生产环境中，一般不允许redis出现swap行为，redis提供了 maxmemory 设置其最多可占用的内存空间。  </p>\n<p>当redis使用的内存超出maxmemory时，此时已经没有多余可用的内存空间，新的数据将无法写入，redis提供了几种数据淘汰策略，用于清理数据，腾出空间以继续提供服务。</p>\n<h3 id=\"淘汰策略\"><a href=\"#淘汰策略\" class=\"headerlink\" title=\"淘汰策略\"></a>淘汰策略</h3><ol>\n<li><p>noeviction</p>\n<p>可读不可写，即不会继续服务写请求，读请求可以继续进行。该策略不会是数据丢失，但由于生产的写请求不可用也同样无法让业务在进行下去，这种策略是默认的。</p>\n</li>\n<li><p>volatile-lru</p>\n<p>淘汰具有过期时间的key，最少使用的key优先淘汰，没有过期时间的key不会被淘汰，该策略可以保证持久化的数据不被丢失。</p>\n</li>\n<li><p>volatile-ttl</p>\n<p>与volatile-lru类似，二者区别是比较过期时间ttl的值，值越小的数据优先淘汰</p>\n</li>\n<li><p>volatile-random</p>\n<p>与2、3类似，区别是随机淘汰有过期时间的key，但不考虑使用频率和过期时间的长短</p>\n</li>\n<li><p>allkeys-lru</p>\n<p>与2类似，区别是该淘汰策略是淘汰redis中所有的key，不区分过期时间，但是区分使用频率。</p>\n</li>\n<li><p>与 5 类似，范围是所有的key，但是不区分使用频率。</p>\n</li>\n</ol>\n<p>volatile开头的只会淘汰带有过期时间的key，allkeys则是所有的key，如果redis只是作为缓存使用，可以使用allkeys，如果有些数据是务必持久化的，则使用volatile。</p>\n"},{"title":"redis的崩溃问题","abbrlink":"711efdca","date":"2023-09-15T00:58:11.000Z","_content":"\n# Redis的崩溃问题\n\n### 引言\n\nredis在我们日常的开发中通常作为缓存来分担数据库的压力，但是redis本身的并发能力也是有限度的，当访问量过大时，就会造成一系列的问题，常见问题有缓存穿透、缓存击穿、缓存雪崩，下面我们就来介绍这几种常见问题，并给出相应的解决办法。\n\n### 缓存穿透\n\n缓存穿透是指当有数据访问时，在redis中访问不存在且在数据库中访问也不存在，导致每次访问都直接访问数据库，从而返回空值。\n\n#### 解决办法\n\n1. 布隆过滤器\n\n   将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力。\n\n2. 返回空对象\n\n   如果一个查询返回的数据为空，我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。缓存空对象带来的问题：\n\n   * 空值做了缓存，那么缓存中便存了更多的键，需要更多的内存空间，比较有效的方法是针对这类数据设置一个较短的过期时间，让其自动剔除。\n   * 缓存和存储的数据会有一段时间窗口的不一致，可能会对业务有一定影响。可以利用消息系统或者其他方式清除掉缓存层中的空对象。\n\n### 缓存击穿\n\n缓存击穿是指有一个热点key，加大并发对这种key的访问，当这种key失效的时候，巨大的并发就会直面冲击数据库，讲数据库冲垮，导致数据库宕机。\n\n#### 解决办法\n\n1. 互斥锁\n\n   缓存失效时，不是立即去加载db数据，而是先使用某些带成功返回的原子操作命令，如(Redis的setnx）去操作，成功的时候，再去加载db数据库数据和设置缓存。否则就去重试获取缓存。\n\n2. “永远不过期”\n   * 从redis上看，确实没有设置过期时间，这就保证了，不会出现热点key过期问题，也就是“物理”不过期。\n   * 从功能上看，如果不过期，那不就成静态的了吗？所以我们把过期时间存在key对应的value里，如果发现要过期了，通过一个后台的异步线程进行缓存的构建，也就是“逻辑”过期。\n\n### 缓存雪崩\n\n缓存雪崩是指缓存中存在大量的经常访问的key，当这些key在同一时间失效时，巨大的访问量就会直接落在数据库上，是数据库崩溃。\n\n#### 解决办法\n\n1. 均匀过期\n\n   在缓存的时候给过期时间加上一个随机值，这样就会大幅度的减少缓存在同一时间过期。\n\n2. 双层缓存策略、二级缓存\n\n   Cache1 为原始缓存，Cache2 为拷贝缓存，Cache1 失效时，可以访问 Cache2，Cache1 缓存失效时间设置为短期，Cache2 设置为长期。\n\n3. 加互斥锁\n\n   在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个 key 只允许一个线程查询数据和写缓存，其他线程等待；\n","source":"_posts/redis的崩溃问题.md","raw":"---\ntitle: redis的崩溃问题\ncategories:\n  - 中间件\ntags:\n  - redis\nabbrlink: 711efdca\ndate: 2023-09-15 08:58:11\n---\n\n# Redis的崩溃问题\n\n### 引言\n\nredis在我们日常的开发中通常作为缓存来分担数据库的压力，但是redis本身的并发能力也是有限度的，当访问量过大时，就会造成一系列的问题，常见问题有缓存穿透、缓存击穿、缓存雪崩，下面我们就来介绍这几种常见问题，并给出相应的解决办法。\n\n### 缓存穿透\n\n缓存穿透是指当有数据访问时，在redis中访问不存在且在数据库中访问也不存在，导致每次访问都直接访问数据库，从而返回空值。\n\n#### 解决办法\n\n1. 布隆过滤器\n\n   将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力。\n\n2. 返回空对象\n\n   如果一个查询返回的数据为空，我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。缓存空对象带来的问题：\n\n   * 空值做了缓存，那么缓存中便存了更多的键，需要更多的内存空间，比较有效的方法是针对这类数据设置一个较短的过期时间，让其自动剔除。\n   * 缓存和存储的数据会有一段时间窗口的不一致，可能会对业务有一定影响。可以利用消息系统或者其他方式清除掉缓存层中的空对象。\n\n### 缓存击穿\n\n缓存击穿是指有一个热点key，加大并发对这种key的访问，当这种key失效的时候，巨大的并发就会直面冲击数据库，讲数据库冲垮，导致数据库宕机。\n\n#### 解决办法\n\n1. 互斥锁\n\n   缓存失效时，不是立即去加载db数据，而是先使用某些带成功返回的原子操作命令，如(Redis的setnx）去操作，成功的时候，再去加载db数据库数据和设置缓存。否则就去重试获取缓存。\n\n2. “永远不过期”\n   * 从redis上看，确实没有设置过期时间，这就保证了，不会出现热点key过期问题，也就是“物理”不过期。\n   * 从功能上看，如果不过期，那不就成静态的了吗？所以我们把过期时间存在key对应的value里，如果发现要过期了，通过一个后台的异步线程进行缓存的构建，也就是“逻辑”过期。\n\n### 缓存雪崩\n\n缓存雪崩是指缓存中存在大量的经常访问的key，当这些key在同一时间失效时，巨大的访问量就会直接落在数据库上，是数据库崩溃。\n\n#### 解决办法\n\n1. 均匀过期\n\n   在缓存的时候给过期时间加上一个随机值，这样就会大幅度的减少缓存在同一时间过期。\n\n2. 双层缓存策略、二级缓存\n\n   Cache1 为原始缓存，Cache2 为拷贝缓存，Cache1 失效时，可以访问 Cache2，Cache1 缓存失效时间设置为短期，Cache2 设置为长期。\n\n3. 加互斥锁\n\n   在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个 key 只允许一个线程查询数据和写缓存，其他线程等待；\n","slug":"redis的崩溃问题","published":1,"updated":"2023-09-23T13:07:11.165Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln5lvfc7000efwug4jcccpvc","content":"<h1 id=\"Redis的崩溃问题\"><a href=\"#Redis的崩溃问题\" class=\"headerlink\" title=\"Redis的崩溃问题\"></a>Redis的崩溃问题</h1><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>redis在我们日常的开发中通常作为缓存来分担数据库的压力，但是redis本身的并发能力也是有限度的，当访问量过大时，就会造成一系列的问题，常见问题有缓存穿透、缓存击穿、缓存雪崩，下面我们就来介绍这几种常见问题，并给出相应的解决办法。</p>\n<h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h3><p>缓存穿透是指当有数据访问时，在redis中访问不存在且在数据库中访问也不存在，导致每次访问都直接访问数据库，从而返回空值。</p>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><ol>\n<li><p>布隆过滤器</p>\n<p>将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力。</p>\n</li>\n<li><p>返回空对象</p>\n<p>如果一个查询返回的数据为空，我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。缓存空对象带来的问题：</p>\n<ul>\n<li>空值做了缓存，那么缓存中便存了更多的键，需要更多的内存空间，比较有效的方法是针对这类数据设置一个较短的过期时间，让其自动剔除。</li>\n<li>缓存和存储的数据会有一段时间窗口的不一致，可能会对业务有一定影响。可以利用消息系统或者其他方式清除掉缓存层中的空对象。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h3><p>缓存击穿是指有一个热点key，加大并发对这种key的访问，当这种key失效的时候，巨大的并发就会直面冲击数据库，讲数据库冲垮，导致数据库宕机。</p>\n<h4 id=\"解决办法-1\"><a href=\"#解决办法-1\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><ol>\n<li><p>互斥锁</p>\n<p>缓存失效时，不是立即去加载db数据，而是先使用某些带成功返回的原子操作命令，如(Redis的setnx）去操作，成功的时候，再去加载db数据库数据和设置缓存。否则就去重试获取缓存。</p>\n</li>\n<li><p>“永远不过期”</p>\n<ul>\n<li>从redis上看，确实没有设置过期时间，这就保证了，不会出现热点key过期问题，也就是“物理”不过期。</li>\n<li>从功能上看，如果不过期，那不就成静态的了吗？所以我们把过期时间存在key对应的value里，如果发现要过期了，通过一个后台的异步线程进行缓存的构建，也就是“逻辑”过期。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><p>缓存雪崩是指缓存中存在大量的经常访问的key，当这些key在同一时间失效时，巨大的访问量就会直接落在数据库上，是数据库崩溃。</p>\n<h4 id=\"解决办法-2\"><a href=\"#解决办法-2\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><ol>\n<li><p>均匀过期</p>\n<p>在缓存的时候给过期时间加上一个随机值，这样就会大幅度的减少缓存在同一时间过期。</p>\n</li>\n<li><p>双层缓存策略、二级缓存</p>\n<p>Cache1 为原始缓存，Cache2 为拷贝缓存，Cache1 失效时，可以访问 Cache2，Cache1 缓存失效时间设置为短期，Cache2 设置为长期。</p>\n</li>\n<li><p>加互斥锁</p>\n<p>在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个 key 只允许一个线程查询数据和写缓存，其他线程等待；</p>\n</li>\n</ol>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"Redis的崩溃问题\"><a href=\"#Redis的崩溃问题\" class=\"headerlink\" title=\"Redis的崩溃问题\"></a>Redis的崩溃问题</h1><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>redis在我们日常的开发中通常作为缓存来分担数据库的压力，但是redis本身的并发能力也是有限度的，当访问量过大时，就会造成一系列的问题，常见问题有缓存穿透、缓存击穿、缓存雪崩，下面我们就来介绍这几种常见问题，并给出相应的解决办法。</p>\n<h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h3><p>缓存穿透是指当有数据访问时，在redis中访问不存在且在数据库中访问也不存在，导致每次访问都直接访问数据库，从而返回空值。</p>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><ol>\n<li><p>布隆过滤器</p>\n<p>将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力。</p>\n</li>\n<li><p>返回空对象</p>\n<p>如果一个查询返回的数据为空，我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。缓存空对象带来的问题：</p>\n<ul>\n<li>空值做了缓存，那么缓存中便存了更多的键，需要更多的内存空间，比较有效的方法是针对这类数据设置一个较短的过期时间，让其自动剔除。</li>\n<li>缓存和存储的数据会有一段时间窗口的不一致，可能会对业务有一定影响。可以利用消息系统或者其他方式清除掉缓存层中的空对象。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h3><p>缓存击穿是指有一个热点key，加大并发对这种key的访问，当这种key失效的时候，巨大的并发就会直面冲击数据库，讲数据库冲垮，导致数据库宕机。</p>\n<h4 id=\"解决办法-1\"><a href=\"#解决办法-1\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><ol>\n<li><p>互斥锁</p>\n<p>缓存失效时，不是立即去加载db数据，而是先使用某些带成功返回的原子操作命令，如(Redis的setnx）去操作，成功的时候，再去加载db数据库数据和设置缓存。否则就去重试获取缓存。</p>\n</li>\n<li><p>“永远不过期”</p>\n<ul>\n<li>从redis上看，确实没有设置过期时间，这就保证了，不会出现热点key过期问题，也就是“物理”不过期。</li>\n<li>从功能上看，如果不过期，那不就成静态的了吗？所以我们把过期时间存在key对应的value里，如果发现要过期了，通过一个后台的异步线程进行缓存的构建，也就是“逻辑”过期。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><p>缓存雪崩是指缓存中存在大量的经常访问的key，当这些key在同一时间失效时，巨大的访问量就会直接落在数据库上，是数据库崩溃。</p>\n<h4 id=\"解决办法-2\"><a href=\"#解决办法-2\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><ol>\n<li><p>均匀过期</p>\n<p>在缓存的时候给过期时间加上一个随机值，这样就会大幅度的减少缓存在同一时间过期。</p>\n</li>\n<li><p>双层缓存策略、二级缓存</p>\n<p>Cache1 为原始缓存，Cache2 为拷贝缓存，Cache1 失效时，可以访问 Cache2，Cache1 缓存失效时间设置为短期，Cache2 设置为长期。</p>\n</li>\n<li><p>加互斥锁</p>\n<p>在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个 key 只允许一个线程查询数据和写缓存，其他线程等待；</p>\n</li>\n</ol>\n"},{"title":"第一篇博客","abbrlink":"ff05b5bf","date":"2023-09-10T01:30:07.000Z","_content":"\n# 一级标题 \n\n代码测试： \n\n```py \nprint(\"Hello\")\n```\n\n 图片测试： \n\n![](http://mculover666.cn/blog/20191031/R4mWMXsrRKxu.png?imageslim) 引用测试：\n\n> 这是一条引用 \n>\n> ## 二级标题 \n>\n> 无序列表测试：\n>\n> - 哈哈 \n>\n> - 嘿嘿 \n>\n> - 吼吼 \n>\n>   ### 三级标题\n>\n>    #### 四级标题 \n>\n>   \n","source":"_posts/第一篇博客.md","raw":"---\ntitle: 第一篇博客\nabbrlink: ff05b5bf\ndate: 2023-09-10 09:30:07\ntags:\n---\n\n# 一级标题 \n\n代码测试： \n\n```py \nprint(\"Hello\")\n```\n\n 图片测试： \n\n![](http://mculover666.cn/blog/20191031/R4mWMXsrRKxu.png?imageslim) 引用测试：\n\n> 这是一条引用 \n>\n> ## 二级标题 \n>\n> 无序列表测试：\n>\n> - 哈哈 \n>\n> - 嘿嘿 \n>\n> - 吼吼 \n>\n>   ### 三级标题\n>\n>    #### 四级标题 \n>\n>   \n","slug":"第一篇博客","published":1,"updated":"2023-09-23T07:24:15.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln5lvfca000jfwug7ppkcybz","content":"<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><p>代码测试： </p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p> 图片测试： </p>\n<p><img src=\"http://mculover666.cn/blog/20191031/R4mWMXsrRKxu.png?imageslim\"> 引用测试：</p>\n<blockquote>\n<p>这是一条引用 </p>\n<h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><p>无序列表测试：</p>\n<ul>\n<li><p>哈哈 </p>\n</li>\n<li><p>嘿嘿 </p>\n</li>\n<li><p>吼吼 </p>\n<h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><p>代码测试： </p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p> 图片测试： </p>\n<p><img src=\"http://mculover666.cn/blog/20191031/R4mWMXsrRKxu.png?imageslim\"> 引用测试：</p>\n<blockquote>\n<p>这是一条引用 </p>\n<h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><p>无序列表测试：</p>\n<ul>\n<li><p>哈哈 </p>\n</li>\n<li><p>嘿嘿 </p>\n</li>\n<li><p>吼吼 </p>\n<h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4></li>\n</ul>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/Mysql的存储引擎/show engines.jpg","post":"cln5lvfbx0002fwugheaj3rcn","slug":"show engines.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Mysql的执行流程/20210711173835627.jpg","post":"cln5lvfc20007fwug0bdbg89m","slug":"20210711173835627.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cln5lvfc20007fwug0bdbg89m","category_id":"cln5lvfbz0004fwugghf39xjq","_id":"cln5lvfc8000ffwug2pxr1lau"},{"post_id":"cln5lvfbp0000fwugf74679zm","category_id":"cln5lvfbz0004fwugghf39xjq","_id":"cln5lvfca000kfwugcd44geev"},{"post_id":"cln5lvfc6000cfwug93vg1yl2","category_id":"cln5lvfbz0004fwugghf39xjq","_id":"cln5lvfca000lfwug14br3bsk"},{"post_id":"cln5lvfbx0002fwugheaj3rcn","category_id":"cln5lvfbz0004fwugghf39xjq","_id":"cln5lvfcb000nfwugblhc385p"},{"post_id":"cln5lvfc7000efwug4jcccpvc","category_id":"cln5lvfbz0004fwugghf39xjq","_id":"cln5lvfcb000pfwugfbbn6i42"},{"post_id":"cln5lvfc10006fwugby0n0na7","category_id":"cln5lvfbz0004fwugghf39xjq","_id":"cln5lvfcc000rfwugg77o4hzf"}],"PostTag":[{"post_id":"cln5lvfc20007fwug0bdbg89m","tag_id":"cln5lvfc10005fwugb4kw1mgr","_id":"cln5lvfc6000bfwuge95dhjge"},{"post_id":"cln5lvfbp0000fwugf74679zm","tag_id":"cln5lvfc10005fwugb4kw1mgr","_id":"cln5lvfc7000dfwugcs4gbmo1"},{"post_id":"cln5lvfbx0002fwugheaj3rcn","tag_id":"cln5lvfc10005fwugb4kw1mgr","_id":"cln5lvfc9000ifwug3otrg2fu"},{"post_id":"cln5lvfc10006fwugby0n0na7","tag_id":"cln5lvfc8000hfwugf5lacxjn","_id":"cln5lvfcb000ofwugfqttb0xa"},{"post_id":"cln5lvfc6000cfwug93vg1yl2","tag_id":"cln5lvfc8000hfwugf5lacxjn","_id":"cln5lvfcc000sfwug16h26dgk"},{"post_id":"cln5lvfc7000efwug4jcccpvc","tag_id":"cln5lvfc8000hfwugf5lacxjn","_id":"cln5lvfcc000tfwug878m98ap"}],"Tag":[{"name":"Mysql","_id":"cln5lvfc10005fwugb4kw1mgr"},{"name":"redis","_id":"cln5lvfc8000hfwugf5lacxjn"}]}}